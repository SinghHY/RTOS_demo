
RTOS_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014490  20000078  080070c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014508  080070c0  00024508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194e2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032f8  00000000  00000000  0003958a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  0003c888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  0003dc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252a6  00000000  00000000  0003eea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fab  00000000  00000000  00064146  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcce2  00000000  00000000  000750f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f8  00000000  00000000  00151e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e7c 	.word	0x08006e7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006e7c 	.word	0x08006e7c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001445c 	.word	0x2001445c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b972 	b.w	80005a0 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	4688      	mov	r8, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4615      	mov	r5, r2
 80002e6:	d967      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0720 	rsb	r7, r2, #32
 80002f2:	fa01 f302 	lsl.w	r3, r1, r2
 80002f6:	fa20 f707 	lsr.w	r7, r0, r7
 80002fa:	4095      	lsls	r5, r2
 80002fc:	ea47 0803 	orr.w	r8, r7, r3
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbb8 f7fe 	udiv	r7, r8, lr
 800030c:	fa1f fc85 	uxth.w	ip, r5
 8000310:	fb0e 8817 	mls	r8, lr, r7, r8
 8000314:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000318:	fb07 f10c 	mul.w	r1, r7, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f107 30ff 	add.w	r0, r7, #4294967295
 8000326:	f080 811b 	bcs.w	8000560 <__udivmoddi4+0x28c>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8118 	bls.w	8000560 <__udivmoddi4+0x28c>
 8000330:	3f02      	subs	r7, #2
 8000332:	442b      	add	r3, r5
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0fe 	udiv	r0, r3, lr
 800033c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fc0c 	mul.w	ip, r0, ip
 8000348:	45a4      	cmp	ip, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x290>
 8000356:	45a4      	cmp	ip, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x290>
 800035c:	3802      	subs	r0, #2
 800035e:	442c      	add	r4, r5
 8000360:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	2700      	movs	r7, #0
 800036a:	b11e      	cbz	r6, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c6 4300 	strd	r4, r3, [r6]
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xbe>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80eb 	beq.w	800055a <__udivmoddi4+0x286>
 8000384:	2700      	movs	r7, #0
 8000386:	e9c6 0100 	strd	r0, r1, [r6]
 800038a:	4638      	mov	r0, r7
 800038c:	4639      	mov	r1, r7
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f783 	clz	r7, r3
 8000396:	2f00      	cmp	r7, #0
 8000398:	d147      	bne.n	800042a <__udivmoddi4+0x156>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd0>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80fa 	bhi.w	8000598 <__udivmoddi4+0x2c4>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	4698      	mov	r8, r3
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa0>
 80003b2:	e9c6 4800 	strd	r4, r8, [r6]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa0>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xe8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 808f 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c6:	1b49      	subs	r1, r1, r5
 80003c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003cc:	fa1f f885 	uxth.w	r8, r5
 80003d0:	2701      	movs	r7, #1
 80003d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e0:	fb08 f10c 	mul.w	r1, r8, ip
 80003e4:	4299      	cmp	r1, r3
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e8:	18eb      	adds	r3, r5, r3
 80003ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	f200 80cd 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003f6:	4684      	mov	ip, r0
 80003f8:	1a59      	subs	r1, r3, r1
 80003fa:	b2a3      	uxth	r3, r4
 80003fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000400:	fb0e 1410 	mls	r4, lr, r0, r1
 8000404:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000408:	fb08 f800 	mul.w	r8, r8, r0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x14c>
 8000410:	192c      	adds	r4, r5, r4
 8000412:	f100 33ff 	add.w	r3, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14a>
 8000418:	45a0      	cmp	r8, r4
 800041a:	f200 80b6 	bhi.w	800058a <__udivmoddi4+0x2b6>
 800041e:	4618      	mov	r0, r3
 8000420:	eba4 0408 	sub.w	r4, r4, r8
 8000424:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000428:	e79f      	b.n	800036a <__udivmoddi4+0x96>
 800042a:	f1c7 0c20 	rsb	ip, r7, #32
 800042e:	40bb      	lsls	r3, r7
 8000430:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000434:	ea4e 0e03 	orr.w	lr, lr, r3
 8000438:	fa01 f407 	lsl.w	r4, r1, r7
 800043c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000440:	fa21 f30c 	lsr.w	r3, r1, ip
 8000444:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000448:	4325      	orrs	r5, r4
 800044a:	fbb3 f9f8 	udiv	r9, r3, r8
 800044e:	0c2c      	lsrs	r4, r5, #16
 8000450:	fb08 3319 	mls	r3, r8, r9, r3
 8000454:	fa1f fa8e 	uxth.w	sl, lr
 8000458:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800045c:	fb09 f40a 	mul.w	r4, r9, sl
 8000460:	429c      	cmp	r4, r3
 8000462:	fa02 f207 	lsl.w	r2, r2, r7
 8000466:	fa00 f107 	lsl.w	r1, r0, r7
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1e 0303 	adds.w	r3, lr, r3
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	f080 8087 	bcs.w	8000586 <__udivmoddi4+0x2b2>
 8000478:	429c      	cmp	r4, r3
 800047a:	f240 8084 	bls.w	8000586 <__udivmoddi4+0x2b2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	4473      	add	r3, lr
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	b2ad      	uxth	r5, r5
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000494:	fb00 fa0a 	mul.w	sl, r0, sl
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1e 0404 	adds.w	r4, lr, r4
 80004a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a4:	d26b      	bcs.n	800057e <__udivmoddi4+0x2aa>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d969      	bls.n	800057e <__udivmoddi4+0x2aa>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4474      	add	r4, lr
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c2      	mov	sl, r8
 80004be:	464b      	mov	r3, r9
 80004c0:	d354      	bcc.n	800056c <__udivmoddi4+0x298>
 80004c2:	d051      	beq.n	8000568 <__udivmoddi4+0x294>
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d069      	beq.n	800059c <__udivmoddi4+0x2c8>
 80004c8:	ebb1 050a 	subs.w	r5, r1, sl
 80004cc:	eb64 0403 	sbc.w	r4, r4, r3
 80004d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d4:	40fd      	lsrs	r5, r7
 80004d6:	40fc      	lsrs	r4, r7
 80004d8:	ea4c 0505 	orr.w	r5, ip, r5
 80004dc:	e9c6 5400 	strd	r5, r4, [r6]
 80004e0:	2700      	movs	r7, #0
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ec:	4095      	lsls	r5, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	fa21 f303 	lsr.w	r3, r1, r3
 80004f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004fa:	4338      	orrs	r0, r7
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000502:	fa1f f885 	uxth.w	r8, r5
 8000506:	fb0e 3317 	mls	r3, lr, r7, r3
 800050a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050e:	fb07 f308 	mul.w	r3, r7, r8
 8000512:	428b      	cmp	r3, r1
 8000514:	fa04 f402 	lsl.w	r4, r4, r2
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x256>
 800051a:	1869      	adds	r1, r5, r1
 800051c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000520:	d22f      	bcs.n	8000582 <__udivmoddi4+0x2ae>
 8000522:	428b      	cmp	r3, r1
 8000524:	d92d      	bls.n	8000582 <__udivmoddi4+0x2ae>
 8000526:	3f02      	subs	r7, #2
 8000528:	4429      	add	r1, r5
 800052a:	1acb      	subs	r3, r1, r3
 800052c:	b281      	uxth	r1, r0
 800052e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000532:	fb0e 3310 	mls	r3, lr, r0, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb00 f308 	mul.w	r3, r0, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x27e>
 8000542:	1869      	adds	r1, r5, r1
 8000544:	f100 3cff 	add.w	ip, r0, #4294967295
 8000548:	d217      	bcs.n	800057a <__udivmoddi4+0x2a6>
 800054a:	428b      	cmp	r3, r1
 800054c:	d915      	bls.n	800057a <__udivmoddi4+0x2a6>
 800054e:	3802      	subs	r0, #2
 8000550:	4429      	add	r1, r5
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000558:	e73b      	b.n	80003d2 <__udivmoddi4+0xfe>
 800055a:	4637      	mov	r7, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e709      	b.n	8000374 <__udivmoddi4+0xa0>
 8000560:	4607      	mov	r7, r0
 8000562:	e6e7      	b.n	8000334 <__udivmoddi4+0x60>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x8c>
 8000568:	4541      	cmp	r1, r8
 800056a:	d2ab      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 800056c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000570:	eb69 020e 	sbc.w	r2, r9, lr
 8000574:	3801      	subs	r0, #1
 8000576:	4613      	mov	r3, r2
 8000578:	e7a4      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057a:	4660      	mov	r0, ip
 800057c:	e7e9      	b.n	8000552 <__udivmoddi4+0x27e>
 800057e:	4618      	mov	r0, r3
 8000580:	e795      	b.n	80004ae <__udivmoddi4+0x1da>
 8000582:	4667      	mov	r7, ip
 8000584:	e7d1      	b.n	800052a <__udivmoddi4+0x256>
 8000586:	4681      	mov	r9, r0
 8000588:	e77c      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058a:	3802      	subs	r0, #2
 800058c:	442c      	add	r4, r5
 800058e:	e747      	b.n	8000420 <__udivmoddi4+0x14c>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	442b      	add	r3, r5
 8000596:	e72f      	b.n	80003f8 <__udivmoddi4+0x124>
 8000598:	4638      	mov	r0, r7
 800059a:	e708      	b.n	80003ae <__udivmoddi4+0xda>
 800059c:	4637      	mov	r7, r6
 800059e:	e6e9      	b.n	8000374 <__udivmoddi4+0xa0>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 faa1 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f84f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f8bb 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <main+0x90>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <main+0x90>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80005c2:	f004 f975 	bl	80048b0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c6:	f005 f9d3 	bl	8005970 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World task1" ,1 , &task1_handle);
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <main+0x94>)
 80005d6:	22c8      	movs	r2, #200	; 0xc8
 80005d8:	4918      	ldr	r1, [pc, #96]	; (800063c <main+0x98>)
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <main+0x9c>)
 80005dc:	f002 face 	bl	8002b7c <xTaskCreate>
 80005e0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d009      	beq.n	80005fc <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	e7fe      	b.n	80005fa <main+0x56>


  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World task2" ,2 , &task2_handle);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2302      	movs	r3, #2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <main+0xa0>)
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	490f      	ldr	r1, [pc, #60]	; (8000648 <main+0xa4>)
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xa8>)
 800060c:	f002 fab6 	bl	8002b7c <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d009      	beq.n	800062c <main+0x88>
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e7fe      	b.n	800062a <main+0x86>

  vTaskStartScheduler();
 800062c:	f002 fc08 	bl	8002e40 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x8c>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08006e94 	.word	0x08006e94
 800063c:	08006ea8 	.word	0x08006ea8
 8000640:	0800082d 	.word	0x0800082d
 8000644:	08006eb0 	.word	0x08006eb0
 8000648:	08006ec4 	.word	0x08006ec4
 800064c:	0800083d 	.word	0x0800083d

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 ffa0 	bl	80065a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a29      	ldr	r2, [pc, #164]	; (8000724 <SystemClock_Config+0xd4>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SystemClock_Config+0xd4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xd8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ffae 	bl	8001640 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ea:	f000 f8c1 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fcc0 	bl	8001090 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000716:	f000 f8ab 	bl	8000870 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_GPIO_Init+0xf0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a34      	ldr	r2, [pc, #208]	; (800081c <MX_GPIO_Init+0xf0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <MX_GPIO_Init+0xf0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_GPIO_Init+0xf0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <MX_GPIO_Init+0xf0>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0xf0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_GPIO_Init+0xf0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a26      	ldr	r2, [pc, #152]	; (800081c <MX_GPIO_Init+0xf0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_GPIO_Init+0xf0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1f      	ldr	r2, [pc, #124]	; (800081c <MX_GPIO_Init+0xf0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_GPIO_Init+0xf0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	481a      	ldr	r0, [pc, #104]	; (8000820 <MX_GPIO_Init+0xf4>)
 80007b8:	f000 fc50 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0xf8>)
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4815      	ldr	r0, [pc, #84]	; (8000828 <MX_GPIO_Init+0xfc>)
 80007d2:	f000 fab1 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d6:	230c      	movs	r3, #12
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e6:	2307      	movs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xf4>)
 80007f2:	f000 faa1 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_GPIO_Init+0xf4>)
 800080e:	f000 fa93 	bl	8000d38 <HAL_GPIO_Init>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	10210000 	.word	0x10210000
 8000828:	40020800 	.word	0x40020800

0800082c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void * parameters)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n" ,(char*) parameters);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f005 ff19 	bl	800666c <puts>
 800083a:	e7fb      	b.n	8000834 <task1_handler+0x8>

0800083c <task2_handler>:

}


static void task2_handler(void * parameters)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n" ,(char*) parameters);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f005 ff11 	bl	800666c <puts>
 800084a:	e7fb      	b.n	8000844 <task2_handler+0x8>

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 f969 	bl	8000b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80008be:	f003 fc57 	bl	8004170 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	2036      	movs	r0, #54	; 0x36
 80008e6:	f000 f9fd 	bl	8000ce4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008ea:	2036      	movs	r0, #54	; 0x36
 80008ec:	f000 fa16 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_InitTick+0xa4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <HAL_InitTick+0xa4>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_InitTick+0xa4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fcc0 	bl	800129c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800091c:	f000 fcaa 	bl	8001274 <HAL_RCC_GetPCLK1Freq>
 8000920:	4603      	mov	r3, r0
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <HAL_InitTick+0xa8>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	0c9b      	lsrs	r3, r3, #18
 8000930:	3b01      	subs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_InitTick+0xac>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_InitTick+0xb0>)
 8000938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_InitTick+0xac>)
 800093c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000940:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_InitTick+0xac>)
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_InitTick+0xac>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_InitTick+0xac>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <HAL_InitTick+0xac>)
 8000956:	f001 f8cd 	bl	8001af4 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <HAL_InitTick+0xac>)
 8000962:	f001 f8fc 	bl	8001b5e <HAL_TIM_Base_Start_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	431bde83 	.word	0x431bde83
 800097c:	200143d8 	.word	0x200143d8
 8000980:	40001000 	.word	0x40001000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM6_DAC_IRQHandler+0x10>)
 80009be:	f001 f8f2 	bl	8001ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200143d8 	.word	0x200143d8

080009cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
	}

return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_isatty>:

int _isatty(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	return 1;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemInit+0x28>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <SystemInit+0x28>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SystemInit+0x28>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd3 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f005 fd2d 	bl	8006528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fd69 	bl	80005a4 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad8:	08007048 	.word	0x08007048
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000ae4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000ae8:	20014508 	.word	0x20014508

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f8d8 	bl	8000cce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff fed6 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff feac 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20014418 	.word	0x20014418

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20014418 	.word	0x20014418

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff4c 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf6:	f7ff ff61 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000cfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	6978      	ldr	r0, [r7, #20]
 8000d02:	f7ff ffb1 	bl	8000c68 <NVIC_EncodePriority>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff80 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff54 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e165      	b.n	8001020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 8154 	bne.w	800101a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d00b      	beq.n	8000d92 <HAL_GPIO_Init+0x5a>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d86:	2b11      	cmp	r3, #17
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d130      	bne.n	8000df4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	f003 0201 	and.w	r2, r3, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0xfc>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b12      	cmp	r3, #18
 8000e32:	d123      	bne.n	8000e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	69b9      	ldr	r1, [r7, #24]
 8000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80ae 	beq.w	800101a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b5c      	ldr	r3, [pc, #368]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b59      	ldr	r3, [pc, #356]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eda:	4a57      	ldr	r2, [pc, #348]	; (8001038 <HAL_GPIO_Init+0x300>)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4e      	ldr	r2, [pc, #312]	; (800103c <HAL_GPIO_Init+0x304>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x21a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4d      	ldr	r2, [pc, #308]	; (8001040 <HAL_GPIO_Init+0x308>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x216>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <HAL_GPIO_Init+0x30c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4b      	ldr	r2, [pc, #300]	; (8001048 <HAL_GPIO_Init+0x310>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x20e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4a      	ldr	r2, [pc, #296]	; (800104c <HAL_GPIO_Init+0x314>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x20a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a49      	ldr	r2, [pc, #292]	; (8001050 <HAL_GPIO_Init+0x318>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x206>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_GPIO_Init+0x31c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x202>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x21c>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	4934      	ldr	r1, [pc, #208]	; (8001038 <HAL_GPIO_Init+0x300>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f96:	4a30      	ldr	r2, [pc, #192]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc0:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_GPIO_Init+0x320>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f ae96 	bls.w	8000d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	; 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001078:	e003      	b.n	8001082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	041a      	lsls	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0cc      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 030f 	and.w	r3, r3, #15
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d90c      	bls.n	80010cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d044      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d119      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114a:	2b03      	cmp	r3, #3
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e067      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f023 0203 	bic.w	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff fcec 	bl	8000b5c <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001186:	e00a      	b.n	800119e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001188:	f7ff fce8 	bl	8000b5c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e04f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 020c 	and.w	r2, r3, #12
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1eb      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d20c      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f873 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 800121a:	4601      	mov	r1, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	fa21 f303 	lsr.w	r3, r1, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb4a 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00
 800124c:	40023800 	.word	0x40023800
 8001250:	08006fa8 	.word	0x08006fa8
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_RCC_GetHCLKFreq+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001278:	f7ff fff0 	bl	800125c <HAL_RCC_GetHCLKFreq>
 800127c:	4601      	mov	r1, r0
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	0a9b      	lsrs	r3, r3, #10
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	08006fb8 	.word	0x08006fb8

0800129c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	220f      	movs	r2, #15
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_RCC_GetClockConfig+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 020f 	and.w	r2, r3, #15
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800131a:	4bc6      	ldr	r3, [pc, #792]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b0c      	cmp	r3, #12
 8001324:	f200 817e 	bhi.w	8001624 <HAL_RCC_GetSysClockFreq+0x324>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <HAL_RCC_GetSysClockFreq+0x30>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001365 	.word	0x08001365
 8001334:	08001625 	.word	0x08001625
 8001338:	08001625 	.word	0x08001625
 800133c:	08001625 	.word	0x08001625
 8001340:	0800136b 	.word	0x0800136b
 8001344:	08001625 	.word	0x08001625
 8001348:	08001625 	.word	0x08001625
 800134c:	08001625 	.word	0x08001625
 8001350:	08001371 	.word	0x08001371
 8001354:	08001625 	.word	0x08001625
 8001358:	08001625 	.word	0x08001625
 800135c:	08001625 	.word	0x08001625
 8001360:	080014cd 	.word	0x080014cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001364:	4bb4      	ldr	r3, [pc, #720]	; (8001638 <HAL_RCC_GetSysClockFreq+0x338>)
 8001366:	613b      	str	r3, [r7, #16]
       break;
 8001368:	e15f      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800136a:	4bb4      	ldr	r3, [pc, #720]	; (800163c <HAL_RCC_GetSysClockFreq+0x33c>)
 800136c:	613b      	str	r3, [r7, #16]
      break;
 800136e:	e15c      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001370:	4bb0      	ldr	r3, [pc, #704]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001378:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800137a:	4bae      	ldr	r3, [pc, #696]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d04a      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001386:	4bab      	ldr	r3, [pc, #684]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	099b      	lsrs	r3, r3, #6
 800138c:	f04f 0400 	mov.w	r4, #0
 8001390:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	ea03 0501 	and.w	r5, r3, r1
 800139c:	ea04 0602 	and.w	r6, r4, r2
 80013a0:	4629      	mov	r1, r5
 80013a2:	4632      	mov	r2, r6
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	0154      	lsls	r4, r2, #5
 80013ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013b2:	014b      	lsls	r3, r1, #5
 80013b4:	4619      	mov	r1, r3
 80013b6:	4622      	mov	r2, r4
 80013b8:	1b49      	subs	r1, r1, r5
 80013ba:	eb62 0206 	sbc.w	r2, r2, r6
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f04f 0400 	mov.w	r4, #0
 80013c6:	0194      	lsls	r4, r2, #6
 80013c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013cc:	018b      	lsls	r3, r1, #6
 80013ce:	1a5b      	subs	r3, r3, r1
 80013d0:	eb64 0402 	sbc.w	r4, r4, r2
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	00e2      	lsls	r2, r4, #3
 80013de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013e2:	00d9      	lsls	r1, r3, #3
 80013e4:	460b      	mov	r3, r1
 80013e6:	4614      	mov	r4, r2
 80013e8:	195b      	adds	r3, r3, r5
 80013ea:	eb44 0406 	adc.w	r4, r4, r6
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	0262      	lsls	r2, r4, #9
 80013f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80013fc:	0259      	lsls	r1, r3, #9
 80013fe:	460b      	mov	r3, r1
 8001400:	4614      	mov	r4, r2
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f04f 0400 	mov.w	r4, #0
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	f7fe ff48 	bl	80002a4 <__aeabi_uldivmod>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e049      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141c:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	f04f 0400 	mov.w	r4, #0
 8001426:	f240 11ff 	movw	r1, #511	; 0x1ff
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	ea03 0501 	and.w	r5, r3, r1
 8001432:	ea04 0602 	and.w	r6, r4, r2
 8001436:	4629      	mov	r1, r5
 8001438:	4632      	mov	r2, r6
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	f04f 0400 	mov.w	r4, #0
 8001442:	0154      	lsls	r4, r2, #5
 8001444:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001448:	014b      	lsls	r3, r1, #5
 800144a:	4619      	mov	r1, r3
 800144c:	4622      	mov	r2, r4
 800144e:	1b49      	subs	r1, r1, r5
 8001450:	eb62 0206 	sbc.w	r2, r2, r6
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f04f 0400 	mov.w	r4, #0
 800145c:	0194      	lsls	r4, r2, #6
 800145e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001462:	018b      	lsls	r3, r1, #6
 8001464:	1a5b      	subs	r3, r3, r1
 8001466:	eb64 0402 	sbc.w	r4, r4, r2
 800146a:	f04f 0100 	mov.w	r1, #0
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	00e2      	lsls	r2, r4, #3
 8001474:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001478:	00d9      	lsls	r1, r3, #3
 800147a:	460b      	mov	r3, r1
 800147c:	4614      	mov	r4, r2
 800147e:	195b      	adds	r3, r3, r5
 8001480:	eb44 0406 	adc.w	r4, r4, r6
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	02a2      	lsls	r2, r4, #10
 800148e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001492:	0299      	lsls	r1, r3, #10
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	4618      	mov	r0, r3
 800149a:	4621      	mov	r1, r4
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f04f 0400 	mov.w	r4, #0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4623      	mov	r3, r4
 80014a6:	f7fe fefd 	bl	80002a4 <__aeabi_uldivmod>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014b0:	4b60      	ldr	r3, [pc, #384]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	3301      	adds	r3, #1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	613b      	str	r3, [r7, #16]
      break;
 80014ca:	e0ae      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014cc:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d6:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d04a      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e2:	4b54      	ldr	r3, [pc, #336]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	099b      	lsrs	r3, r3, #6
 80014e8:	f04f 0400 	mov.w	r4, #0
 80014ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	ea03 0501 	and.w	r5, r3, r1
 80014f8:	ea04 0602 	and.w	r6, r4, r2
 80014fc:	4629      	mov	r1, r5
 80014fe:	4632      	mov	r2, r6
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	0154      	lsls	r4, r2, #5
 800150a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800150e:	014b      	lsls	r3, r1, #5
 8001510:	4619      	mov	r1, r3
 8001512:	4622      	mov	r2, r4
 8001514:	1b49      	subs	r1, r1, r5
 8001516:	eb62 0206 	sbc.w	r2, r2, r6
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	f04f 0400 	mov.w	r4, #0
 8001522:	0194      	lsls	r4, r2, #6
 8001524:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001528:	018b      	lsls	r3, r1, #6
 800152a:	1a5b      	subs	r3, r3, r1
 800152c:	eb64 0402 	sbc.w	r4, r4, r2
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	00e2      	lsls	r2, r4, #3
 800153a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800153e:	00d9      	lsls	r1, r3, #3
 8001540:	460b      	mov	r3, r1
 8001542:	4614      	mov	r4, r2
 8001544:	195b      	adds	r3, r3, r5
 8001546:	eb44 0406 	adc.w	r4, r4, r6
 800154a:	f04f 0100 	mov.w	r1, #0
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	0262      	lsls	r2, r4, #9
 8001554:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001558:	0259      	lsls	r1, r3, #9
 800155a:	460b      	mov	r3, r1
 800155c:	4614      	mov	r4, r2
 800155e:	4618      	mov	r0, r3
 8001560:	4621      	mov	r1, r4
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f04f 0400 	mov.w	r4, #0
 8001568:	461a      	mov	r2, r3
 800156a:	4623      	mov	r3, r4
 800156c:	f7fe fe9a 	bl	80002a4 <__aeabi_uldivmod>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e049      	b.n	800160c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	f04f 0400 	mov.w	r4, #0
 8001582:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	ea03 0501 	and.w	r5, r3, r1
 800158e:	ea04 0602 	and.w	r6, r4, r2
 8001592:	4629      	mov	r1, r5
 8001594:	4632      	mov	r2, r6
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	f04f 0400 	mov.w	r4, #0
 800159e:	0154      	lsls	r4, r2, #5
 80015a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015a4:	014b      	lsls	r3, r1, #5
 80015a6:	4619      	mov	r1, r3
 80015a8:	4622      	mov	r2, r4
 80015aa:	1b49      	subs	r1, r1, r5
 80015ac:	eb62 0206 	sbc.w	r2, r2, r6
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	f04f 0400 	mov.w	r4, #0
 80015b8:	0194      	lsls	r4, r2, #6
 80015ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015be:	018b      	lsls	r3, r1, #6
 80015c0:	1a5b      	subs	r3, r3, r1
 80015c2:	eb64 0402 	sbc.w	r4, r4, r2
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	00e2      	lsls	r2, r4, #3
 80015d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015d4:	00d9      	lsls	r1, r3, #3
 80015d6:	460b      	mov	r3, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	195b      	adds	r3, r3, r5
 80015dc:	eb44 0406 	adc.w	r4, r4, r6
 80015e0:	f04f 0100 	mov.w	r1, #0
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	02a2      	lsls	r2, r4, #10
 80015ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015ee:	0299      	lsls	r1, r3, #10
 80015f0:	460b      	mov	r3, r1
 80015f2:	4614      	mov	r4, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	461a      	mov	r2, r3
 8001600:	4623      	mov	r3, r4
 8001602:	f7fe fe4f 	bl	80002a4 <__aeabi_uldivmod>
 8001606:	4603      	mov	r3, r0
 8001608:	460c      	mov	r4, r1
 800160a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_GetSysClockFreq+0x334>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	0f1b      	lsrs	r3, r3, #28
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	613b      	str	r3, [r7, #16]
      break;
 8001622:	e002      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_RCC_GetSysClockFreq+0x338>)
 8001626:	613b      	str	r3, [r7, #16]
      break;
 8001628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800162a:	693b      	ldr	r3, [r7, #16]
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	00f42400 	.word	0x00f42400
 800163c:	007a1200 	.word	0x007a1200

08001640 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8083 	beq.w	8001760 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800165a:	4b95      	ldr	r3, [pc, #596]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d019      	beq.n	800169a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001666:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800166e:	2b08      	cmp	r3, #8
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001672:	4b8f      	ldr	r3, [pc, #572]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800167e:	d00c      	beq.n	800169a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001680:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d112      	bne.n	80016b2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001698:	d10b      	bne.n	80016b2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169a:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d05b      	beq.n	800175e <HAL_RCC_OscConfig+0x11e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d157      	bne.n	800175e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e216      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x8a>
 80016bc:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a7b      	ldr	r2, [pc, #492]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e01d      	b.n	8001706 <HAL_RCC_OscConfig+0xc6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0xae>
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a75      	ldr	r2, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0xc6>
 80016ee:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b6d      	ldr	r3, [pc, #436]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6c      	ldr	r2, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d013      	beq.n	8001736 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fa25 	bl	8000b5c <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001716:	f7ff fa21 	bl	8000b5c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1db      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0xd6>
 8001734:	e014      	b.n	8001760 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fa11 	bl	8000b5c <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173e:	f7ff fa0d 	bl	8000b5c <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1c7      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001750:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0xfe>
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d06f      	beq.n	800184c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	d017      	beq.n	80017a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001778:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001780:	2b08      	cmp	r3, #8
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001784:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001790:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d11c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179c:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d116      	bne.n	80017d6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x180>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e18f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4938      	ldr	r1, [pc, #224]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d4:	e03a      	b.n	800184c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d020      	beq.n	8001820 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f9ba 	bl	8000b5c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff f9b6 	bl	8000b5c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e170      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4925      	ldr	r1, [pc, #148]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
 800181e:	e015      	b.n	800184c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff f999 	bl	8000b5c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff f995 	bl	8000b5c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e14f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d037      	beq.n	80018c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_RCC_OscConfig+0x278>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff f979 	bl	8000b5c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff f975 	bl	8000b5c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e12f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x22e>
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_OscConfig+0x278>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff f962 	bl	8000b5c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	e00f      	b.n	80018bc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff f95e 	bl	8000b5c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d908      	bls.n	80018bc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e118      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	42470000 	.word	0x42470000
 80018b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b8a      	ldr	r3, [pc, #552]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80018be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e9      	bne.n	800189c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8097 	beq.w	8001a04 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b83      	ldr	r3, [pc, #524]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10f      	bne.n	8001906 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a7e      	ldr	r2, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_OscConfig+0x4ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d118      	bne.n	8001944 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001912:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCC_OscConfig+0x4ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a75      	ldr	r2, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x4ac>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7ff f91d 	bl	8000b5c <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7ff f919 	bl	8000b5c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0d3      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	4b6c      	ldr	r3, [pc, #432]	; (8001aec <HAL_RCC_OscConfig+0x4ac>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x31a>
 800194c:	4b66      	ldr	r3, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a65      	ldr	r2, [pc, #404]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	e01c      	b.n	8001994 <HAL_RCC_OscConfig+0x354>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x33c>
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a60      	ldr	r2, [pc, #384]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
 800196e:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0x354>
 800197c:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a59      	ldr	r2, [pc, #356]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a56      	ldr	r2, [pc, #344]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 800198e:	f023 0304 	bic.w	r3, r3, #4
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d015      	beq.n	80019c8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff f8de 	bl	8000b5c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff f8da 	bl	8000b5c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e092      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0ee      	beq.n	80019a4 <HAL_RCC_OscConfig+0x364>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff f8c8 	bl	8000b5c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8c4 	bl	8000b5c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e07c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e6:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ee      	bne.n	80019d0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d068      	beq.n	8001ade <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d060      	beq.n	8001ada <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d145      	bne.n	8001aac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x4b0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f899 	bl	8000b5c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff f895 	bl	8000b5c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e04f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a40:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69da      	ldr	r2, [r3, #28]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	019b      	lsls	r3, r3, #6
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	071b      	lsls	r3, r3, #28
 8001a78:	491b      	ldr	r1, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_OscConfig+0x4b0>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f86a 	bl	8000b5c <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f866 	bl	8000b5c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e020      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x44c>
 8001aaa:	e018      	b.n	8001ade <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x4b0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f853 	bl	8000b5c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff f84f 	bl	8000b5c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e009      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x4a8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x47a>
 8001ad8:	e001      	b.n	8001ade <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42470060 	.word	0x42470060

08001af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01d      	b.n	8001b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f815 	bl	8001b4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 f968 	bl	8001e08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d007      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0202 	mvn.w	r2, #2
 8001bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8ee 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8e0 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8f1 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d122      	bne.n	8001c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d11b      	bne.n	8001c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0204 	mvn.w	r2, #4
 8001c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8c4 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c42:	e005      	b.n	8001c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8b6 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8c7 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d122      	bne.n	8001caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11b      	bne.n	8001caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0208 	mvn.w	r2, #8
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f89a 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c96:	e005      	b.n	8001ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f88c 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f89d 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d122      	bne.n	8001cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d11b      	bne.n	8001cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0210 	mvn.w	r2, #16
 8001cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f870 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001cea:	e005      	b.n	8001cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f862 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f873 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10e      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f06f 0201 	mvn.w	r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fd91 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d10e      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b80      	cmp	r3, #128	; 0x80
 8001d44:	d107      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f903 	bl	8001f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d10e      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d107      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f838 	bl	8001df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d10e      	bne.n	8001dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d107      	bne.n	8001dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0220 	mvn.w	r2, #32
 8001da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8cd 	bl	8001f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a40      	ldr	r2, [pc, #256]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e26:	d00f      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <TIM_Base_SetConfig+0x118>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00b      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <TIM_Base_SetConfig+0x11c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <TIM_Base_SetConfig+0x120>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d108      	bne.n	8001e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02b      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d027      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <TIM_Base_SetConfig+0x118>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d023      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <TIM_Base_SetConfig+0x11c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <TIM_Base_SetConfig+0x120>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01b      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d017      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <TIM_Base_SetConfig+0x128>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <TIM_Base_SetConfig+0x12c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00f      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <TIM_Base_SetConfig+0x130>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00b      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <TIM_Base_SetConfig+0x134>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <TIM_Base_SetConfig+0x138>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d003      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <TIM_Base_SetConfig+0x13c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0xf8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d103      	bne.n	8001f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40014800 	.word	0x40014800
 8001f3c:	40001800 	.word	0x40001800
 8001f40:	40001c00 	.word	0x40001c00
 8001f44:	40002000 	.word	0x40002000

08001f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f103 0208 	add.w	r2, r3, #8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f103 0208 	add.w	r2, r3, #8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f103 0208 	add.w	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d103      	bne.n	8002032 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e00c      	b.n	800204c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3308      	adds	r3, #8
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e002      	b.n	8002040 <vListInsert+0x2e>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	429a      	cmp	r2, r3
 800204a:	d2f6      	bcs.n	800203a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	601a      	str	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6892      	ldr	r2, [r2, #8]
 800209a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6852      	ldr	r2, [r2, #4]
 80020a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d103      	bne.n	80020b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <xQueueGenericReset+0x28>
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	e7fe      	b.n	80020fe <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002100:	f002 f8b0 	bl	8004264 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	68f9      	ldr	r1, [r7, #12]
 800210e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	441a      	add	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	3b01      	subs	r3, #1
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	441a      	add	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	22ff      	movs	r2, #255	; 0xff
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d114      	bne.n	8002180 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01a      	beq.n	8002194 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3310      	adds	r3, #16
 8002162:	4618      	mov	r0, r3
 8002164:	f001 f91c 	bl	80033a0 <xTaskRemoveFromEventList>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d012      	beq.n	8002194 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <xQueueGenericReset+0xcc>)
 8002170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	e009      	b.n	8002194 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3310      	adds	r3, #16
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fef3 	bl	8001f70 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3324      	adds	r3, #36	; 0x24
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff feee 	bl	8001f70 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002194:	f002 f894 	bl	80042c0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002198:	2301      	movs	r3, #1
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000ed04 	.word	0xe000ed04

080021a8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <xQueueGenericCreate+0x28>
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e7fe      	b.n	80021ce <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <xQueueGenericCreate+0x46>
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d101      	bne.n	80021f2 <xQueueGenericCreate+0x4a>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <xQueueGenericCreate+0x4c>
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <xQueueGenericCreate+0x64>
 80021f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e7fe      	b.n	800220a <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002212:	d909      	bls.n	8002228 <xQueueGenericCreate+0x80>
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e7fe      	b.n	8002226 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	3350      	adds	r3, #80	; 0x50
 800222c:	4618      	mov	r0, r3
 800222e:	f002 f939 	bl	80044a4 <pvPortMalloc>
 8002232:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3350      	adds	r3, #80	; 0x50
 8002242:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002244:	79fa      	ldrb	r2, [r7, #7]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f805 	bl	8002260 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002256:	6a3b      	ldr	r3, [r7, #32]
    }
 8002258:	4618      	mov	r0, r3
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e002      	b.n	8002282 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800228e:	2101      	movs	r1, #1
 8002290:	69b8      	ldr	r0, [r7, #24]
 8002292:	f7ff ff21 	bl	80020d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	2073      	movs	r0, #115	; 0x73
 80022a6:	f003 fa5b 	bl	8005760 <SEGGER_SYSVIEW_RecordU32x3>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b090      	sub	sp, #64	; 0x40
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <xQueueGenericSend+0x30>
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	e7fe      	b.n	80022e2 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <xQueueGenericSend+0x3e>
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <xQueueGenericSend+0x42>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <xQueueGenericSend+0x44>
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <xQueueGenericSend+0x5c>
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	e7fe      	b.n	800230e <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d103      	bne.n	800231e <xQueueGenericSend+0x6a>
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <xQueueGenericSend+0x6e>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <xQueueGenericSend+0x70>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <xQueueGenericSend+0x88>
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	e7fe      	b.n	800233a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800233c:	f001 f9cc 	bl	80036d8 <xTaskGetSchedulerState>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <xQueueGenericSend+0x98>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <xQueueGenericSend+0x9c>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <xQueueGenericSend+0x9e>
 8002350:	2300      	movs	r3, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <xQueueGenericSend+0xb6>
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	e7fe      	b.n	8002368 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800236a:	f001 ff7b 	bl	8004264 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	429a      	cmp	r2, r3
 8002378:	d302      	bcc.n	8002380 <xQueueGenericSend+0xcc>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d136      	bne.n	80023ee <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	4618      	mov	r0, r3
 8002384:	f003 ff76 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	460b      	mov	r3, r1
 8002392:	4601      	mov	r1, r0
 8002394:	205a      	movs	r0, #90	; 0x5a
 8002396:	f003 fa59 	bl	800584c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023a0:	f000 fa78 	bl	8002894 <prvCopyDataToQueue>
 80023a4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	3324      	adds	r3, #36	; 0x24
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fff4 	bl	80033a0 <xTaskRemoveFromEventList>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d013      	beq.n	80023e6 <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80023be:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <xQueueGenericSend+0x240>)
 80023c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	e00a      	b.n	80023e6 <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <xQueueGenericSend+0x240>)
 80023d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80023e6:	f001 ff6b 	bl	80042c0 <vPortExitCritical>
                return pdPASS;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07d      	b.n	80024ea <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d110      	bne.n	8002416 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023f4:	f001 ff64 	bl	80042c0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 ff3a 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	460b      	mov	r3, r1
 800240a:	4601      	mov	r1, r0
 800240c:	205a      	movs	r0, #90	; 0x5a
 800240e:	f003 fa1d 	bl	800584c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002412:	2300      	movs	r3, #0
 8002414:	e069      	b.n	80024ea <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4618      	mov	r0, r3
 8002422:	f001 f823 	bl	800346c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002426:	2301      	movs	r3, #1
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800242a:	f001 ff49 	bl	80042c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800242e:	f000 fd6b 	bl	8002f08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002432:	f001 ff17 	bl	8004264 <vPortEnterCritical>
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800243c:	b25b      	sxtb	r3, r3
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d103      	bne.n	800244c <xQueueGenericSend+0x198>
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002452:	b25b      	sxtb	r3, r3
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d103      	bne.n	8002462 <xQueueGenericSend+0x1ae>
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002462:	f001 ff2d 	bl	80042c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002466:	1d3a      	adds	r2, r7, #4
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f001 f812 	bl	8003498 <xTaskCheckForTimeOut>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d124      	bne.n	80024c4 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800247a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800247c:	f000 fb02 	bl	8002a84 <prvIsQueueFull>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	3310      	adds	r3, #16
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f000 ff34 	bl	80032fc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002496:	f000 fa8d 	bl	80029b4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800249a:	f000 fd43 	bl	8002f24 <xTaskResumeAll>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f47f af62 	bne.w	800236a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <xQueueGenericSend+0x240>)
 80024a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	e758      	b.n	800236a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80024b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ba:	f000 fa7b 	bl	80029b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024be:	f000 fd31 	bl	8002f24 <xTaskResumeAll>
 80024c2:	e752      	b.n	800236a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80024c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c6:	f000 fa75 	bl	80029b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80024ca:	f000 fd2b 	bl	8002f24 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fecf 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	460b      	mov	r3, r1
 80024e0:	4601      	mov	r1, r0
 80024e2:	205a      	movs	r0, #90	; 0x5a
 80024e4:	f003 f9b2 	bl	800584c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80024e8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3738      	adds	r7, #56	; 0x38
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000ed04 	.word	0xe000ed04

080024f8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b090      	sub	sp, #64	; 0x40
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <xQueueGenericSendFromISR+0x2c>
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
 8002522:	e7fe      	b.n	8002522 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <xQueueGenericSendFromISR+0x3a>
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <xQueueGenericSendFromISR+0x3e>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <xQueueGenericSendFromISR+0x40>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <xQueueGenericSendFromISR+0x58>
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e7fe      	b.n	800254e <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d103      	bne.n	800255e <xQueueGenericSendFromISR+0x66>
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <xQueueGenericSendFromISR+0x6a>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <xQueueGenericSendFromISR+0x6c>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <xQueueGenericSendFromISR+0x84>
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	623b      	str	r3, [r7, #32]
 800257a:	e7fe      	b.n	800257a <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800257c:	f001 ff54 	bl	8004428 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002580:	f3ef 8211 	mrs	r2, BASEPRI
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	61fa      	str	r2, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002598:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <xQueueGenericSendFromISR+0xb6>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d147      	bne.n	800263e <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fe57 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 80025c6:	4601      	mov	r1, r0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	2060      	movs	r0, #96	; 0x60
 80025ce:	f003 f86d 	bl	80056ac <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025d8:	f000 f95c 	bl	8002894 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80025dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d112      	bne.n	800260c <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d024      	beq.n	8002638 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	3324      	adds	r3, #36	; 0x24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fed4 	bl	80033a0 <xTaskRemoveFromEventList>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01c      	beq.n	8002638 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d019      	beq.n	8002638 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e015      	b.n	8002638 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800260c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002610:	2b7f      	cmp	r3, #127	; 0x7f
 8002612:	d109      	bne.n	8002628 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e7fe      	b.n	8002626 <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800262c:	3301      	adds	r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	b25a      	sxtb	r2, r3
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002638:	2301      	movs	r3, #1
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800263c:	e00b      	b.n	8002656 <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fe17 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002646:	4601      	mov	r1, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	2060      	movs	r0, #96	; 0x60
 800264e:	f003 f82d 	bl	80056ac <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002652:	2300      	movs	r3, #0
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002662:	4618      	mov	r0, r3
 8002664:	3740      	adds	r7, #64	; 0x40
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b08f      	sub	sp, #60	; 0x3c
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <xQueueReceive+0x2e>
        __asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	e7fe      	b.n	8002698 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <xQueueReceive+0x3c>
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <xQueueReceive+0x40>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <xQueueReceive+0x42>
 80026ac:	2300      	movs	r3, #0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <xQueueReceive+0x5a>
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	e7fe      	b.n	80026c4 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026c6:	f001 f807 	bl	80036d8 <xTaskGetSchedulerState>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <xQueueReceive+0x6a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueReceive+0x6e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueReceive+0x70>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <xQueueReceive+0x88>
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e7fe      	b.n	80026f2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026f4:	f001 fdb6 	bl	8004264 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d031      	beq.n	8002768 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002708:	f000 f92e 	bl	8002968 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fdb0 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002714:	4604      	mov	r4, r0
 8002716:	2000      	movs	r0, #0
 8002718:	f003 fdac 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 800271c:	4601      	mov	r1, r0
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	2301      	movs	r3, #1
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	4621      	mov	r1, r4
 800272a:	205c      	movs	r0, #92	; 0x5c
 800272c:	f003 f88e 	bl	800584c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	3310      	adds	r3, #16
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fe2b 	bl	80033a0 <xTaskRemoveFromEventList>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <xQueueReceive+0x224>)
 8002752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002760:	f001 fdae 	bl	80042c0 <vPortExitCritical>
                return pdPASS;
 8002764:	2301      	movs	r3, #1
 8002766:	e08e      	b.n	8002886 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800276e:	f001 fda7 	bl	80042c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	4618      	mov	r0, r3
 8002776:	f003 fd7d 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 800277a:	4604      	mov	r4, r0
 800277c:	2000      	movs	r0, #0
 800277e:	f003 fd79 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002782:	4601      	mov	r1, r0
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	2301      	movs	r3, #1
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	460a      	mov	r2, r1
 800278e:	4621      	mov	r1, r4
 8002790:	205c      	movs	r0, #92	; 0x5c
 8002792:	f003 f85b 	bl	800584c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002796:	2300      	movs	r3, #0
 8002798:	e075      	b.n	8002886 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fe61 	bl	800346c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027ae:	f001 fd87 	bl	80042c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027b2:	f000 fba9 	bl	8002f08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027b6:	f001 fd55 	bl	8004264 <vPortEnterCritical>
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d103      	bne.n	80027d0 <xQueueReceive+0x164>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d103      	bne.n	80027e6 <xQueueReceive+0x17a>
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e6:	f001 fd6b 	bl	80042c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ea:	1d3a      	adds	r2, r7, #4
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fe50 	bl	8003498 <xTaskCheckForTimeOut>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d124      	bne.n	8002848 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002800:	f000 f92a 	bl	8002a58 <prvIsQueueEmpty>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d018      	beq.n	800283c <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	3324      	adds	r3, #36	; 0x24
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fd72 	bl	80032fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800281a:	f000 f8cb 	bl	80029b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800281e:	f000 fb81 	bl	8002f24 <xTaskResumeAll>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f af65 	bne.w	80026f4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <xQueueReceive+0x224>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	e75b      	b.n	80026f4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800283c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283e:	f000 f8b9 	bl	80029b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002842:	f000 fb6f 	bl	8002f24 <xTaskResumeAll>
 8002846:	e755      	b.n	80026f4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284a:	f000 f8b3 	bl	80029b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800284e:	f000 fb69 	bl	8002f24 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002854:	f000 f900 	bl	8002a58 <prvIsQueueEmpty>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	f43f af4a 	beq.w	80026f4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	4618      	mov	r0, r3
 8002864:	f003 fd06 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002868:	4604      	mov	r4, r0
 800286a:	2000      	movs	r0, #0
 800286c:	f003 fd02 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002870:	4601      	mov	r1, r0
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	2301      	movs	r3, #1
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	460a      	mov	r2, r1
 800287c:	4621      	mov	r1, r4
 800287e:	205c      	movs	r0, #92	; 0x5c
 8002880:	f002 ffe4 	bl	800584c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002884:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002886:	4618      	mov	r0, r3
 8002888:	3734      	adds	r7, #52	; 0x34
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d14d      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 ff28 	bl	8003714 <xTaskPriorityDisinherit>
 80028c4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e043      	b.n	8002956 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d119      	bne.n	8002908 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6858      	ldr	r0, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	461a      	mov	r2, r3
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	f003 fe55 	bl	800658e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	441a      	add	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d32b      	bcc.n	8002956 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e026      	b.n	8002956 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68d8      	ldr	r0, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	461a      	mov	r2, r3
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	f003 fe3b 	bl	800658e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	425b      	negs	r3, r3
 8002922:	441a      	add	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	425b      	negs	r3, r3
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d105      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3b01      	subs	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800295e:	697b      	ldr	r3, [r7, #20]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d018      	beq.n	80029ac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d303      	bcc.n	800299c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f003 fdf1 	bl	800658e <memcpy>
    }
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029bc:	f001 fc52 	bl	8004264 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c8:	e011      	b.n	80029ee <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fce2 	bl	80033a0 <xTaskRemoveFromEventList>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80029e2:	f000 fdbd 	bl	8003560 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	dce9      	bgt.n	80029ca <prvUnlockQueue+0x16>
 80029f6:	e000      	b.n	80029fa <prvUnlockQueue+0x46>
                        break;
 80029f8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a02:	f001 fc5d 	bl	80042c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a06:	f001 fc2d 	bl	8004264 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a10:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a12:	e011      	b.n	8002a38 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3310      	adds	r3, #16
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fcbd 	bl	80033a0 <xTaskRemoveFromEventList>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a2c:	f000 fd98 	bl	8003560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dce9      	bgt.n	8002a14 <prvUnlockQueue+0x60>
 8002a40:	e000      	b.n	8002a44 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a42:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a4c:	f001 fc38 	bl	80042c0 <vPortExitCritical>
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a60:	f001 fc00 	bl	8004264 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e001      	b.n	8002a76 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a76:	f001 fc23 	bl	80042c0 <vPortExitCritical>

    return xReturn;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a8c:	f001 fbea 	bl	8004264 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d102      	bne.n	8002aa2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e001      	b.n	8002aa6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002aa6:	f001 fc0b 	bl	80042c0 <vPortExitCritical>

    return xReturn;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e01e      	b.n	8002b02 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <vQueueAddToRegistry+0x5c>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d115      	bne.n	8002afc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ad0:	490f      	ldr	r1, [pc, #60]	; (8002b10 <vQueueAddToRegistry+0x5c>)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <vQueueAddToRegistry+0x5c>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 fbc3 	bl	8006274 <SEGGER_SYSVIEW_ShrinkId>
 8002aee:	4601      	mov	r1, r0
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	2071      	movs	r0, #113	; 0x71
 8002af6:	f002 fdd9 	bl	80056ac <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002afa:	e005      	b.n	8002b08 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b07      	cmp	r3, #7
 8002b06:	d9dd      	bls.n	8002ac4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2001441c 	.word	0x2001441c

08002b14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b24:	f001 fb9e 	bl	8004264 <vPortEnterCritical>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d103      	bne.n	8002b3e <vQueueWaitForMessageRestricted+0x2a>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d103      	bne.n	8002b54 <vQueueWaitForMessageRestricted+0x40>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b54:	f001 fbb4 	bl	80042c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fbeb 	bl	8003344 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff20 	bl	80029b4 <prvUnlockQueue>
    }
 8002b74:	bf00      	nop
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f001 fc87 	bl	80044a4 <pvPortMalloc>
 8002b96:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b9e:	2058      	movs	r0, #88	; 0x58
 8002ba0:	f001 fc80 	bl	80044a4 <pvPortMalloc>
 8002ba4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb2:	e005      	b.n	8002bc0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f001 fd51 	bl	800465c <vPortFree>
 8002bba:	e001      	b.n	8002bc0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d013      	beq.n	8002bee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9303      	str	r3, [sp, #12]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f80e 	bl	8002bfe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002be2:	69f8      	ldr	r0, [r7, #28]
 8002be4:	f000 f8a0 	bl	8002d28 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002be8:	2301      	movs	r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	e002      	b.n	8002bf4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
    }
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b088      	sub	sp, #32
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	461a      	mov	r2, r3
 8002c16:	21a5      	movs	r1, #165	; 0xa5
 8002c18:	f003 fcc4 	bl	80065a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c26:	3b01      	subs	r3, #1
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f023 0307 	bic.w	r3, r3, #7
 8002c34:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <prvInitialiseNewTask+0x56>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e7fe      	b.n	8002c52 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01f      	beq.n	8002c9a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e012      	b.n	8002c86 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	7819      	ldrb	r1, [r3, #0]
 8002c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3334      	adds	r3, #52	; 0x34
 8002c70:	460a      	mov	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d9e9      	bls.n	8002c60 <prvInitialiseNewTask+0x62>
 8002c8c:	e000      	b.n	8002c90 <prvInitialiseNewTask+0x92>
            {
                break;
 8002c8e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c98:	e003      	b.n	8002ca2 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d901      	bls.n	8002cac <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	2200      	movs	r2, #0
 8002cbc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f974 	bl	8001fb0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	3318      	adds	r3, #24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f96f 	bl	8001fb0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	f1c3 0205 	rsb	r2, r3, #5
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	3350      	adds	r3, #80	; 0x50
 8002cec:	2204      	movs	r2, #4
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fc57 	bl	80065a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	3354      	adds	r3, #84	; 0x54
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fc50 	bl	80065a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	69b8      	ldr	r0, [r7, #24]
 8002d0a:	f001 f907 	bl	8003f1c <pxPortInitialiseStack>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d20:	bf00      	nop
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d30:	f001 fa98 	bl	8004264 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <prvAddNewTaskToReadyList+0xfc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <prvAddNewTaskToReadyList+0xfc>)
 8002d3c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <prvAddNewTaskToReadyList+0x100>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d46:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <prvAddNewTaskToReadyList+0x100>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <prvAddNewTaskToReadyList+0xfc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d110      	bne.n	8002d76 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d54:	f000 fc28 	bl	80035a8 <prvInitialiseTaskLists>
 8002d58:	e00d      	b.n	8002d76 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <prvAddNewTaskToReadyList+0x104>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <prvAddNewTaskToReadyList+0x100>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d802      	bhi.n	8002d76 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d70:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <prvAddNewTaskToReadyList+0x100>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <prvAddNewTaskToReadyList+0x108>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <prvAddNewTaskToReadyList+0x108>)
 8002d7e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <prvAddNewTaskToReadyList+0x108>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <prvAddNewTaskToReadyList+0x94>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 f949 	bl	8006028 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	461d      	mov	r5, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461c      	mov	r4, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	1ae3      	subs	r3, r4, r3
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	462b      	mov	r3, r5
 8002db8:	f001 fe14 	bl	80049e4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 f9b6 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	2201      	movs	r2, #1
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <prvAddNewTaskToReadyList+0x10c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <prvAddNewTaskToReadyList+0x10c>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <prvAddNewTaskToReadyList+0x110>)
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f7ff f8ec 	bl	8001fca <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002df2:	f001 fa65 	bl	80042c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <prvAddNewTaskToReadyList+0x104>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00e      	beq.n	8002e1c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <prvAddNewTaskToReadyList+0x100>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <prvAddNewTaskToReadyList+0x114>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bdb0      	pop	{r4, r5, r7, pc}
 8002e24:	2000016c 	.word	0x2000016c
 8002e28:	20000094 	.word	0x20000094
 8002e2c:	20000178 	.word	0x20000178
 8002e30:	20000188 	.word	0x20000188
 8002e34:	20000174 	.word	0x20000174
 8002e38:	20000098 	.word	0x20000098
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e46:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <vTaskStartScheduler+0xa8>)
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2282      	movs	r2, #130	; 0x82
 8002e52:	4926      	ldr	r1, [pc, #152]	; (8002eec <vTaskStartScheduler+0xac>)
 8002e54:	4826      	ldr	r0, [pc, #152]	; (8002ef0 <vTaskStartScheduler+0xb0>)
 8002e56:	f7ff fe91 	bl	8002b7c <xTaskCreate>
 8002e5a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e62:	f000 fd4d 	bl	8003900 <xTimerCreateTimerTask>
 8002e66:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d128      	bne.n	8002ec0 <vTaskStartScheduler+0x80>
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <vTaskStartScheduler+0xb4>)
 8002e82:	f04f 32ff 	mov.w	r2, #4294967295
 8002e86:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <vTaskStartScheduler+0xb8>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <vTaskStartScheduler+0xbc>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <vTaskStartScheduler+0xc0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3334      	adds	r3, #52	; 0x34
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	4913      	ldr	r1, [pc, #76]	; (8002eec <vTaskStartScheduler+0xac>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fb66 	bl	8006570 <memcmp>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <vTaskStartScheduler+0x76>
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <vTaskStartScheduler+0xc0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 f8fc 	bl	80060ac <SEGGER_SYSVIEW_OnTaskStartExec>
 8002eb4:	e001      	b.n	8002eba <vTaskStartScheduler+0x7a>
 8002eb6:	f003 f89b 	bl	8005ff0 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002eba:	f001 f8bb 	bl	8004034 <xPortStartScheduler>
 8002ebe:	e00d      	b.n	8002edc <vTaskStartScheduler+0x9c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d109      	bne.n	8002edc <vTaskStartScheduler+0x9c>
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	e7fe      	b.n	8002eda <vTaskStartScheduler+0x9a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <vTaskStartScheduler+0xc4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000190 	.word	0x20000190
 8002eec:	08006ecc 	.word	0x08006ecc
 8002ef0:	08003579 	.word	0x08003579
 8002ef4:	2000018c 	.word	0x2000018c
 8002ef8:	20000178 	.word	0x20000178
 8002efc:	20000170 	.word	0x20000170
 8002f00:	20000094 	.word	0x20000094
 8002f04:	2000000c 	.word	0x2000000c

08002f08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <vTaskSuspendAll+0x18>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <vTaskSuspendAll+0x18>)
 8002f14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	20000194 	.word	0x20000194

08002f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f32:	4b43      	ldr	r3, [pc, #268]	; (8003040 <xTaskResumeAll+0x11c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <xTaskResumeAll+0x2a>
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	e7fe      	b.n	8002f4c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f4e:	f001 f989 	bl	8004264 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <xTaskResumeAll+0x11c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	4a39      	ldr	r2, [pc, #228]	; (8003040 <xTaskResumeAll+0x11c>)
 8002f5a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <xTaskResumeAll+0x11c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d165      	bne.n	8003030 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <xTaskResumeAll+0x120>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d061      	beq.n	8003030 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f6c:	e032      	b.n	8002fd4 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <xTaskResumeAll+0x124>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3318      	adds	r3, #24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f882 	bl	8002084 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f87d 	bl	8002084 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 f8cf 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <xTaskResumeAll+0x128>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	; (800304c <xTaskResumeAll+0x128>)
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <xTaskResumeAll+0x12c>)
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7ff f805 	bl	8001fca <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <xTaskResumeAll+0x130>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <xTaskResumeAll+0x134>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <xTaskResumeAll+0x124>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1c8      	bne.n	8002f6e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fe2:	f000 fb5d 	bl	80036a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <xTaskResumeAll+0x138>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ff2:	f000 f859 	bl	80030a8 <xTaskIncrementTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <xTaskResumeAll+0x134>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3b01      	subs	r3, #1
 8003006:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f1      	bne.n	8002ff2 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <xTaskResumeAll+0x138>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <xTaskResumeAll+0x134>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <xTaskResumeAll+0x13c>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003030:	f001 f946 	bl	80042c0 <vPortExitCritical>

    return xAlreadyYielded;
 8003034:	68bb      	ldr	r3, [r7, #8]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000194 	.word	0x20000194
 8003044:	2000016c 	.word	0x2000016c
 8003048:	2000012c 	.word	0x2000012c
 800304c:	20000174 	.word	0x20000174
 8003050:	20000098 	.word	0x20000098
 8003054:	20000094 	.word	0x20000094
 8003058:	20000180 	.word	0x20000180
 800305c:	2000017c 	.word	0x2000017c
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <xTaskGetTickCount+0x1c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000170 	.word	0x20000170

08003084 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800308a:	f001 f9cd 	bl	8004428 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <xTaskGetTickCountFromISR+0x20>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003098:	683b      	ldr	r3, [r7, #0]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000170 	.word	0x20000170

080030a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b2:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <xTaskIncrementTick+0x14c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 8091 	bne.w	80031de <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030bc:	4b4e      	ldr	r3, [pc, #312]	; (80031f8 <xTaskIncrementTick+0x150>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030c4:	4a4c      	ldr	r2, [pc, #304]	; (80031f8 <xTaskIncrementTick+0x150>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11f      	bne.n	8003110 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80030d0:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <xTaskIncrementTick+0x154>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <xTaskIncrementTick+0x46>
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	e7fe      	b.n	80030ec <xTaskIncrementTick+0x44>
 80030ee:	4b43      	ldr	r3, [pc, #268]	; (80031fc <xTaskIncrementTick+0x154>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	4b42      	ldr	r3, [pc, #264]	; (8003200 <xTaskIncrementTick+0x158>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a40      	ldr	r2, [pc, #256]	; (80031fc <xTaskIncrementTick+0x154>)
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4a40      	ldr	r2, [pc, #256]	; (8003200 <xTaskIncrementTick+0x158>)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b40      	ldr	r3, [pc, #256]	; (8003204 <xTaskIncrementTick+0x15c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	4a3e      	ldr	r2, [pc, #248]	; (8003204 <xTaskIncrementTick+0x15c>)
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	f000 fac8 	bl	80036a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003110:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <xTaskIncrementTick+0x160>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d34c      	bcc.n	80031b4 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <xTaskIncrementTick+0x154>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003124:	4b38      	ldr	r3, [pc, #224]	; (8003208 <xTaskIncrementTick+0x160>)
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	601a      	str	r2, [r3, #0]
                    break;
 800312c:	e042      	b.n	80031b4 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800312e:	4b33      	ldr	r3, [pc, #204]	; (80031fc <xTaskIncrementTick+0x154>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d203      	bcs.n	800314e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003146:	4a30      	ldr	r2, [pc, #192]	; (8003208 <xTaskIncrementTick+0x160>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800314c:	e032      	b.n	80031b4 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3304      	adds	r3, #4
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe ff96 	bl	8002084 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3318      	adds	r3, #24
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe ff8d 	bl	8002084 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f002 ffdf 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2201      	movs	r2, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <xTaskIncrementTick+0x164>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <xTaskIncrementTick+0x164>)
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <xTaskIncrementTick+0x168>)
 8003192:	441a      	add	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f7fe ff15 	bl	8001fca <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <xTaskIncrementTick+0x16c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3b5      	bcc.n	800311a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b2:	e7b2      	b.n	800311a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <xTaskIncrementTick+0x16c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ba:	4915      	ldr	r1, [pc, #84]	; (8003210 <xTaskIncrementTick+0x168>)
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d901      	bls.n	80031d0 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <xTaskIncrementTick+0x170>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 80031d8:	2301      	movs	r3, #1
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e004      	b.n	80031e8 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <xTaskIncrementTick+0x174>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <xTaskIncrementTick+0x174>)
 80031e6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031e8:	697b      	ldr	r3, [r7, #20]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000194 	.word	0x20000194
 80031f8:	20000170 	.word	0x20000170
 80031fc:	20000124 	.word	0x20000124
 8003200:	20000128 	.word	0x20000128
 8003204:	20000184 	.word	0x20000184
 8003208:	2000018c 	.word	0x2000018c
 800320c:	20000174 	.word	0x20000174
 8003210:	20000098 	.word	0x20000098
 8003214:	20000094 	.word	0x20000094
 8003218:	20000180 	.word	0x20000180
 800321c:	2000017c 	.word	0x2000017c

08003220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <vTaskSwitchContext+0xc4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <vTaskSwitchContext+0xc8>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003234:	e051      	b.n	80032da <vTaskSwitchContext+0xba>
        xYieldPending = pdFALSE;
 8003236:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <vTaskSwitchContext+0xc8>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <vTaskSwitchContext+0xcc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	f1c3 031f 	rsb	r3, r3, #31
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	4927      	ldr	r1, [pc, #156]	; (80032f0 <vTaskSwitchContext+0xd0>)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <vTaskSwitchContext+0x5a>
        __asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	e7fe      	b.n	8003278 <vTaskSwitchContext+0x58>
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <vTaskSwitchContext+0xd0>)
 8003286:	4413      	add	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3308      	adds	r3, #8
 800329c:	429a      	cmp	r2, r3
 800329e:	d104      	bne.n	80032aa <vTaskSwitchContext+0x8a>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <vTaskSwitchContext+0xd4>)
 80032b2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <vTaskSwitchContext+0xd4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3334      	adds	r3, #52	; 0x34
 80032ba:	2205      	movs	r2, #5
 80032bc:	490e      	ldr	r1, [pc, #56]	; (80032f8 <vTaskSwitchContext+0xd8>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 f956 	bl	8006570 <memcmp>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <vTaskSwitchContext+0xb6>
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <vTaskSwitchContext+0xd4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 feec 	bl	80060ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80032d4:	e001      	b.n	80032da <vTaskSwitchContext+0xba>
        traceTASK_SWITCHED_IN();
 80032d6:	f002 fe8b 	bl	8005ff0 <SEGGER_SYSVIEW_OnIdle>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000194 	.word	0x20000194
 80032e8:	20000180 	.word	0x20000180
 80032ec:	20000174 	.word	0x20000174
 80032f0:	20000098 	.word	0x20000098
 80032f4:	20000094 	.word	0x20000094
 80032f8:	08006ecc 	.word	0x08006ecc

080032fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <vTaskPlaceOnEventList+0x24>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e7fe      	b.n	800331e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <vTaskPlaceOnEventList+0x44>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3318      	adds	r3, #24
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe fe72 	bl	8002012 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800332e:	2101      	movs	r1, #1
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	f000 fa6d 	bl	8003810 <prvAddCurrentTaskToDelayedList>
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000094 	.word	0x20000094

08003344 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <vTaskPlaceOnEventListRestricted+0x26>
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e7fe      	b.n	8003368 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <vTaskPlaceOnEventListRestricted+0x58>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3318      	adds	r3, #24
 8003370:	4619      	mov	r1, r3
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7fe fe29 	bl	8001fca <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003384:	2024      	movs	r0, #36	; 0x24
 8003386:	f002 f937 	bl	80055f8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	68b8      	ldr	r0, [r7, #8]
 800338e:	f000 fa3f 	bl	8003810 <prvAddCurrentTaskToDelayedList>
    }
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000094 	.word	0x20000094

080033a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <xTaskRemoveFromEventList+0x2a>
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e7fe      	b.n	80033c8 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3318      	adds	r3, #24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fe58 	bl	8002084 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <xTaskRemoveFromEventList+0xb4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d120      	bne.n	800341e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fe4f 	bl	8002084 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 fea1 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	2201      	movs	r2, #1
 80033f4:	409a      	lsls	r2, r3
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <xTaskRemoveFromEventList+0xb8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <xTaskRemoveFromEventList+0xb8>)
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <xTaskRemoveFromEventList+0xbc>)
 800340e:	441a      	add	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7fe fdd7 	bl	8001fca <vListInsertEnd>
 800341c:	e005      	b.n	800342a <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3318      	adds	r3, #24
 8003422:	4619      	mov	r1, r3
 8003424:	480e      	ldr	r0, [pc, #56]	; (8003460 <xTaskRemoveFromEventList+0xc0>)
 8003426:	f7fe fdd0 	bl	8001fca <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <xTaskRemoveFromEventList+0xc4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d905      	bls.n	8003444 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <xTaskRemoveFromEventList+0xc8>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e001      	b.n	8003448 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003448:	697b      	ldr	r3, [r7, #20]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000194 	.word	0x20000194
 8003458:	20000174 	.word	0x20000174
 800345c:	20000098 	.word	0x20000098
 8003460:	2000012c 	.word	0x2000012c
 8003464:	20000094 	.word	0x20000094
 8003468:	20000180 	.word	0x20000180

0800346c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <vTaskInternalSetTimeOutState+0x24>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <vTaskInternalSetTimeOutState+0x28>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	605a      	str	r2, [r3, #4]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20000184 	.word	0x20000184
 8003494:	20000170 	.word	0x20000170

08003498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <xTaskCheckForTimeOut+0x24>
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	e7fe      	b.n	80034ba <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <xTaskCheckForTimeOut+0x3e>
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e7fe      	b.n	80034d4 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80034d6:	f000 fec5 	bl	8004264 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034da:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <xTaskCheckForTimeOut+0xc0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d102      	bne.n	80034fa <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e026      	b.n	8003548 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <xTaskCheckForTimeOut+0xc4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d00a      	beq.n	800351c <xTaskCheckForTimeOut+0x84>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	429a      	cmp	r2, r3
 800350e:	d305      	bcc.n	800351c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e015      	b.n	8003548 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	429a      	cmp	r2, r3
 8003524:	d20b      	bcs.n	800353e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad2      	subs	r2, r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff9a 	bl	800346c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e004      	b.n	8003548 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003548:	f000 feba 	bl	80042c0 <vPortExitCritical>

    return xReturn;
 800354c:	69fb      	ldr	r3, [r7, #28]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000170 	.word	0x20000170
 800355c:	20000184 	.word	0x20000184

08003560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <vTaskMissedYield+0x14>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000180 	.word	0x20000180

08003578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003580:	f000 f852 	bl	8003628 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <prvIdleTask+0x28>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d9f9      	bls.n	8003580 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <prvIdleTask+0x2c>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800359c:	e7f0      	b.n	8003580 <prvIdleTask+0x8>
 800359e:	bf00      	nop
 80035a0:	20000098 	.word	0x20000098
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	e00c      	b.n	80035ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <prvInitialiseTaskLists+0x60>)
 80035c0:	4413      	add	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fcd4 	bl	8001f70 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d9ef      	bls.n	80035b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035d4:	480d      	ldr	r0, [pc, #52]	; (800360c <prvInitialiseTaskLists+0x64>)
 80035d6:	f7fe fccb 	bl	8001f70 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035da:	480d      	ldr	r0, [pc, #52]	; (8003610 <prvInitialiseTaskLists+0x68>)
 80035dc:	f7fe fcc8 	bl	8001f70 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035e0:	480c      	ldr	r0, [pc, #48]	; (8003614 <prvInitialiseTaskLists+0x6c>)
 80035e2:	f7fe fcc5 	bl	8001f70 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80035e6:	480c      	ldr	r0, [pc, #48]	; (8003618 <prvInitialiseTaskLists+0x70>)
 80035e8:	f7fe fcc2 	bl	8001f70 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80035ec:	480b      	ldr	r0, [pc, #44]	; (800361c <prvInitialiseTaskLists+0x74>)
 80035ee:	f7fe fcbf 	bl	8001f70 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <prvInitialiseTaskLists+0x78>)
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <prvInitialiseTaskLists+0x64>)
 80035f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvInitialiseTaskLists+0x7c>)
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <prvInitialiseTaskLists+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000098 	.word	0x20000098
 800360c:	200000fc 	.word	0x200000fc
 8003610:	20000110 	.word	0x20000110
 8003614:	2000012c 	.word	0x2000012c
 8003618:	20000140 	.word	0x20000140
 800361c:	20000158 	.word	0x20000158
 8003620:	20000124 	.word	0x20000124
 8003624:	20000128 	.word	0x20000128

08003628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800362e:	e019      	b.n	8003664 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003630:	f000 fe18 	bl	8004264 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <prvCheckTasksWaitingTermination+0x4c>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fd1f 	bl	8002084 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <prvCheckTasksWaitingTermination+0x50>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <prvCheckTasksWaitingTermination+0x50>)
 800364e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <prvCheckTasksWaitingTermination+0x54>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <prvCheckTasksWaitingTermination+0x54>)
 8003658:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800365a:	f000 fe31 	bl	80042c0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f80e 	bl	8003680 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <prvCheckTasksWaitingTermination+0x54>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e1      	bne.n	8003630 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000140 	.word	0x20000140
 8003678:	2000016c 	.word	0x2000016c
 800367c:	20000154 	.word	0x20000154

08003680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4618      	mov	r0, r3
 800368e:	f000 ffe5 	bl	800465c <vPortFree>
                vPortFree( pxTCB );
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 ffe2 	bl	800465c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <prvResetNextTaskUnblockTime+0x30>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <prvResetNextTaskUnblockTime+0x34>)
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036b6:	e005      	b.n	80036c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <prvResetNextTaskUnblockTime+0x30>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <prvResetNextTaskUnblockTime+0x34>)
 80036c2:	6013      	str	r3, [r2, #0]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000124 	.word	0x20000124
 80036d4:	2000018c 	.word	0x2000018c

080036d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <xTaskGetSchedulerState+0x34>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036e6:	2301      	movs	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	e008      	b.n	80036fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <xTaskGetSchedulerState+0x38>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036f4:	2302      	movs	r3, #2
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	e001      	b.n	80036fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036fe:	687b      	ldr	r3, [r7, #4]
    }
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000178 	.word	0x20000178
 8003710:	20000194 	.word	0x20000194

08003714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d066      	beq.n	80037f8 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800372a:	4b36      	ldr	r3, [pc, #216]	; (8003804 <xTaskPriorityDisinherit+0xf0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d009      	beq.n	8003748 <xTaskPriorityDisinherit+0x34>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e7fe      	b.n	8003746 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <xTaskPriorityDisinherit+0x50>
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	e7fe      	b.n	8003762 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	429a      	cmp	r2, r3
 8003778:	d03e      	beq.n	80037f8 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d13a      	bne.n	80037f8 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3304      	adds	r3, #4
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fc7c 	bl	8002084 <uxListRemove>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	2201      	movs	r2, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43da      	mvns	r2, r3
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <xTaskPriorityDisinherit+0xf4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4013      	ands	r3, r2
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <xTaskPriorityDisinherit+0xf4>)
 80037a6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4619      	mov	r1, r3
 80037ac:	204a      	movs	r0, #74	; 0x4a
 80037ae:	f001 ff41 	bl	8005634 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f1c3 0205 	rsb	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	2201      	movs	r2, #1
 80037cc:	409a      	lsls	r2, r3
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <xTaskPriorityDisinherit+0xf4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <xTaskPriorityDisinherit+0xf4>)
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4a09      	ldr	r2, [pc, #36]	; (800380c <xTaskPriorityDisinherit+0xf8>)
 80037e6:	441a      	add	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f7fe fbeb 	bl	8001fca <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037f8:	697b      	ldr	r3, [r7, #20]
    }
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000094 	.word	0x20000094
 8003808:	20000174 	.word	0x20000174
 800380c:	20000098 	.word	0x20000098

08003810 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fc2c 	bl	8002084 <uxListRemove>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4013      	ands	r3, r2
 8003846:	4a29      	ldr	r2, [pc, #164]	; (80038ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003848:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d110      	bne.n	8003874 <prvAddCurrentTaskToDelayedList+0x64>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	211b      	movs	r1, #27
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fca8 	bl	80061b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4820      	ldr	r0, [pc, #128]	; (80038f0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800386e:	f7fe fbac 	bl	8001fca <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003872:	e032      	b.n	80038da <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	d20f      	bcs.n	80038ac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2104      	movs	r1, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fc8e 	bl	80061b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003898:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fe fbb4 	bl	8002012 <vListInsert>
}
 80038aa:	e016      	b.n	80038da <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2104      	movs	r1, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 fc7e 	bl	80061b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3304      	adds	r3, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f7fe fba4 	bl	8002012 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <prvAddCurrentTaskToDelayedList+0xec>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d202      	bcs.n	80038da <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <prvAddCurrentTaskToDelayedList+0xec>)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6013      	str	r3, [r2, #0]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000170 	.word	0x20000170
 80038e8:	20000094 	.word	0x20000094
 80038ec:	20000174 	.word	0x20000174
 80038f0:	20000158 	.word	0x20000158
 80038f4:	20000128 	.word	0x20000128
 80038f8:	20000124 	.word	0x20000124
 80038fc:	2000018c 	.word	0x2000018c

08003900 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800390a:	f000 fad1 	bl	8003eb0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <xTimerCreateTimerTask+0x54>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <xTimerCreateTimerTask+0x58>)
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	2302      	movs	r3, #2
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003924:	490d      	ldr	r1, [pc, #52]	; (800395c <xTimerCreateTimerTask+0x5c>)
 8003926:	480e      	ldr	r0, [pc, #56]	; (8003960 <xTimerCreateTimerTask+0x60>)
 8003928:	f7ff f928 	bl	8002b7c <xTaskCreate>
 800392c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <xTimerCreateTimerTask+0x48>
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	e7fe      	b.n	8003946 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003948:	687b      	ldr	r3, [r7, #4]
    }
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200001c8 	.word	0x200001c8
 8003958:	200001cc 	.word	0x200001cc
 800395c:	08006ed4 	.word	0x08006ed4
 8003960:	08003a95 	.word	0x08003a95

08003964 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <xTimerGenericCommand+0x2c>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	e7fe      	b.n	800398e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <xTimerGenericCommand+0x94>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02a      	beq.n	80039ee <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	dc18      	bgt.n	80039dc <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039aa:	f7ff fe95 	bl	80036d8 <xTaskGetSchedulerState>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d109      	bne.n	80039c8 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <xTimerGenericCommand+0x94>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	f107 0114 	add.w	r1, r7, #20
 80039bc:	2300      	movs	r3, #0
 80039be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c0:	f7fe fc78 	bl	80022b4 <xQueueGenericSend>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24
 80039c6:	e012      	b.n	80039ee <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <xTimerGenericCommand+0x94>)
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	f107 0114 	add.w	r1, r7, #20
 80039d0:	2300      	movs	r3, #0
 80039d2:	2200      	movs	r2, #0
 80039d4:	f7fe fc6e 	bl	80022b4 <xQueueGenericSend>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24
 80039da:	e008      	b.n	80039ee <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <xTimerGenericCommand+0x94>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	f107 0114 	add.w	r1, r7, #20
 80039e4:	2300      	movs	r3, #0
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	f7fe fd86 	bl	80024f8 <xQueueGenericSendFromISR>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80039f0:	4618      	mov	r0, r3
 80039f2:	3728      	adds	r7, #40	; 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200001c8 	.word	0x200001c8

080039fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <prvProcessExpiredTimer+0x94>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fb35 	bl	8002084 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d021      	beq.n	8003a6c <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	18d1      	adds	r1, r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	6978      	ldr	r0, [r7, #20]
 8003a36:	f000 f8d1 	bl	8003bdc <prvInsertTimerInActiveList>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01e      	beq.n	8003a7e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff8a 	bl	8003964 <xTimerGenericCommand>
 8003a50:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d112      	bne.n	8003a7e <prvProcessExpiredTimer+0x82>
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e7fe      	b.n	8003a6a <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	4798      	blx	r3
    }
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200001c0 	.word	0x200001c0

08003a94 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a9c:	f107 0308 	add.w	r3, r7, #8
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f857 	bl	8003b54 <prvGetNextExpireTime>
 8003aa6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f803 	bl	8003ab8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ab2:	f000 f8d5 	bl	8003c60 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ab6:	e7f1      	b.n	8003a9c <prvTimerTask+0x8>

08003ab8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ac2:	f7ff fa21 	bl	8002f08 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f866 	bl	8003b9c <prvSampleTimeNow>
 8003ad0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d130      	bne.n	8003b3a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <prvProcessTimerOrBlockTask+0x3c>
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d806      	bhi.n	8003af4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003ae6:	f7ff fa1d 	bl	8002f24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff85 	bl	80039fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003af2:	e024      	b.n	8003b3e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <prvProcessTimerOrBlockTask+0x90>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <prvProcessTimerOrBlockTask+0x50>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <prvProcessTimerOrBlockTask+0x52>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <prvProcessTimerOrBlockTask+0x94>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f7fe fffb 	bl	8002b14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b1e:	f7ff fa01 	bl	8002f24 <xTaskResumeAll>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <prvProcessTimerOrBlockTask+0x98>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
    }
 8003b38:	e001      	b.n	8003b3e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b3a:	f7ff f9f3 	bl	8002f24 <xTaskResumeAll>
    }
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200001c4 	.word	0x200001c4
 8003b4c:	200001c8 	.word	0x200001c8
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <prvGetNextExpireTime+0x44>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <prvGetNextExpireTime+0x16>
 8003b66:	2201      	movs	r2, #1
 8003b68:	e000      	b.n	8003b6c <prvGetNextExpireTime+0x18>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <prvGetNextExpireTime+0x44>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e001      	b.n	8003b88 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b88:	68fb      	ldr	r3, [r7, #12]
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200001c0 	.word	0x200001c0

08003b9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ba4:	f7ff fa5e 	bl	8003064 <xTaskGetTickCount>
 8003ba8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <prvSampleTimeNow+0x3c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d205      	bcs.n	8003bc0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bb4:	f000 f918 	bl	8003de8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e002      	b.n	8003bc6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <prvSampleTimeNow+0x3c>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200001d0 	.word	0x200001d0

08003bdc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d812      	bhi.n	8003c28 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d302      	bcc.n	8003c16 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e01b      	b.n	8003c4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <prvInsertTimerInActiveList+0x7c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7fe f9f6 	bl	8002012 <vListInsert>
 8003c26:	e012      	b.n	8003c4e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d206      	bcs.n	8003c3e <prvInsertTimerInActiveList+0x62>
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e007      	b.n	8003c4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <prvInsertTimerInActiveList+0x80>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fe f9e2 	bl	8002012 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c4e:	697b      	ldr	r3, [r7, #20]
    }
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200001c4 	.word	0x200001c4
 8003c5c:	200001c0 	.word	0x200001c0

08003c60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	; 0x30
 8003c64:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c66:	e0ac      	b.n	8003dc2 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f2c0 80a8 	blt.w	8003dc0 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe f9ff 	bl	8002084 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff87 	bl	8003b9c <prvSampleTimeNow>
 8003c8e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	f200 8095 	bhi.w	8003dc2 <prvProcessReceivedCommands+0x162>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <prvProcessReceivedCommands+0x40>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cc9 	.word	0x08003cc9
 8003cac:	08003d3b 	.word	0x08003d3b
 8003cb0:	08003d4f 	.word	0x08003d4f
 8003cb4:	08003d97 	.word	0x08003d97
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cc9 	.word	0x08003cc9
 8003cc0:	08003d3b 	.word	0x08003d3b
 8003cc4:	08003d4f 	.word	0x08003d4f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	18d1      	adds	r1, r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce8:	f7ff ff78 	bl	8003bdc <prvInsertTimerInActiveList>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d067      	beq.n	8003dc2 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cf8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05c      	beq.n	8003dc2 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	441a      	add	r2, r3
 8003d10:	2300      	movs	r3, #0
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1a:	f7ff fe23 	bl	8003964 <xTimerGenericCommand>
 8003d1e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d14d      	bne.n	8003dc2 <prvProcessReceivedCommands+0x162>
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e7fe      	b.n	8003d38 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d4c:	e039      	b.n	8003dc2 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <prvProcessReceivedCommands+0x122>
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e7fe      	b.n	8003d80 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	18d1      	adds	r1, r2, r3
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d90:	f7ff ff24 	bl	8003bdc <prvInsertTimerInActiveList>
                        break;
 8003d94:	e015      	b.n	8003dc2 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da6:	f000 fc59 	bl	800465c <vPortFree>
 8003daa:	e00a      	b.n	8003dc2 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003dbe:	e000      	b.n	8003dc2 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003dc0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <prvProcessReceivedCommands+0x184>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f107 0108 	add.w	r1, r7, #8
 8003dca:	2200      	movs	r2, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe fc4d 	bl	800266c <xQueueReceive>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f47f af47 	bne.w	8003c68 <prvProcessReceivedCommands+0x8>
        }
    }
 8003dda:	bf00      	nop
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200001c8 	.word	0x200001c8

08003de8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dee:	e047      	b.n	8003e80 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df0:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <prvSwitchTimerLists+0xc0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <prvSwitchTimerLists+0xc0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe f93b 	bl	8002084 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02d      	beq.n	8003e80 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d90e      	bls.n	8003e54 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <prvSwitchTimerLists+0xc0>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe f8e0 	bl	8002012 <vListInsert>
 8003e52:	e015      	b.n	8003e80 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fd80 	bl	8003964 <xTimerGenericCommand>
 8003e64:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <prvSwitchTimerLists+0x98>
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	e7fe      	b.n	8003e7e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <prvSwitchTimerLists+0xc0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1b2      	bne.n	8003df0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <prvSwitchTimerLists+0xc0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <prvSwitchTimerLists+0xc4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <prvSwitchTimerLists+0xc0>)
 8003e96:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <prvSwitchTimerLists+0xc4>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6013      	str	r3, [r2, #0]
    }
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200001c0 	.word	0x200001c0
 8003eac:	200001c4 	.word	0x200001c4

08003eb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003eb4:	f000 f9d6 	bl	8004264 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <prvCheckForValidListAndQueue+0x54>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11d      	bne.n	8003efc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ec0:	4811      	ldr	r0, [pc, #68]	; (8003f08 <prvCheckForValidListAndQueue+0x58>)
 8003ec2:	f7fe f855 	bl	8001f70 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ec6:	4811      	ldr	r0, [pc, #68]	; (8003f0c <prvCheckForValidListAndQueue+0x5c>)
 8003ec8:	f7fe f852 	bl	8001f70 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <prvCheckForValidListAndQueue+0x60>)
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <prvCheckForValidListAndQueue+0x58>)
 8003ed0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <prvCheckForValidListAndQueue+0x64>)
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <prvCheckForValidListAndQueue+0x5c>)
 8003ed6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ed8:	2200      	movs	r2, #0
 8003eda:	210c      	movs	r1, #12
 8003edc:	200a      	movs	r0, #10
 8003ede:	f7fe f963 	bl	80021a8 <xQueueGenericCreate>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <prvCheckForValidListAndQueue+0x54>)
 8003ee6:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <prvCheckForValidListAndQueue+0x54>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <prvCheckForValidListAndQueue+0x54>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4908      	ldr	r1, [pc, #32]	; (8003f18 <prvCheckForValidListAndQueue+0x68>)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fddc 	bl	8002ab4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003efc:	f000 f9e0 	bl	80042c0 <vPortExitCritical>
    }
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200001c8 	.word	0x200001c8
 8003f08:	20000198 	.word	0x20000198
 8003f0c:	200001ac 	.word	0x200001ac
 8003f10:	200001c0 	.word	0x200001c0
 8003f14:	200001c4 	.word	0x200001c4
 8003f18:	08006edc 	.word	0x08006edc

08003f1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3b04      	subs	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 0201 	bic.w	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3b04      	subs	r3, #4
 8003f4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003f4c:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <pxPortInitialiseStack+0x64>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b14      	subs	r3, #20
 8003f56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b04      	subs	r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f06f 0202 	mvn.w	r2, #2
 8003f6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3b20      	subs	r3, #32
 8003f70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	08003f85 	.word	0x08003f85

08003f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <prvTaskExitError+0x50>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d009      	beq.n	8003fac <prvTaskExitError+0x28>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e7fe      	b.n	8003faa <prvTaskExitError+0x26>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003fbe:	bf00      	nop
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0fc      	beq.n	8003fc0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000010 	.word	0x20000010
	...

08003fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <pxCurrentTCBConst2>)
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	6808      	ldr	r0, [r1, #0]
 8003fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	f380 8809 	msr	PSP, r0
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8811 	msr	BASEPRI, r0
 8003ffa:	4770      	bx	lr
 8003ffc:	f3af 8000 	nop.w

08004000 <pxCurrentTCBConst2>:
 8004000:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop

08004008 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004008:	4808      	ldr	r0, [pc, #32]	; (800402c <prvPortStartFirstTask+0x24>)
 800400a:	6800      	ldr	r0, [r0, #0]
 800400c:	6800      	ldr	r0, [r0, #0]
 800400e:	f380 8808 	msr	MSP, r0
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f380 8814 	msr	CONTROL, r0
 800401a:	b662      	cpsie	i
 800401c:	b661      	cpsie	f
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	df00      	svc	0
 8004028:	bf00      	nop
 800402a:	0000      	.short	0x0000
 800402c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop

08004034 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800403a:	4b44      	ldr	r3, [pc, #272]	; (800414c <xPortStartScheduler+0x118>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a44      	ldr	r2, [pc, #272]	; (8004150 <xPortStartScheduler+0x11c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d109      	bne.n	8004058 <xPortStartScheduler+0x24>
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e7fe      	b.n	8004056 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004058:	4b3c      	ldr	r3, [pc, #240]	; (800414c <xPortStartScheduler+0x118>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3d      	ldr	r2, [pc, #244]	; (8004154 <xPortStartScheduler+0x120>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d109      	bne.n	8004076 <xPortStartScheduler+0x42>
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e7fe      	b.n	8004074 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004076:	4b38      	ldr	r3, [pc, #224]	; (8004158 <xPortStartScheduler+0x124>)
 8004078:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4b30      	ldr	r3, [pc, #192]	; (800415c <xPortStartScheduler+0x128>)
 800409c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <xPortStartScheduler+0x12c>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040a4:	e009      	b.n	80040ba <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <xPortStartScheduler+0x12c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <xPortStartScheduler+0x12c>)
 80040ae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d0ef      	beq.n	80040a6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <xPortStartScheduler+0x12c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1c3 0307 	rsb	r3, r3, #7
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d009      	beq.n	80040e6 <xPortStartScheduler+0xb2>
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	e7fe      	b.n	80040e4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <xPortStartScheduler+0x12c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <xPortStartScheduler+0x12c>)
 80040ee:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <xPortStartScheduler+0x12c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <xPortStartScheduler+0x12c>)
 80040fa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <xPortStartScheduler+0x130>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <xPortStartScheduler+0x130>)
 800410a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800410e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <xPortStartScheduler+0x130>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <xPortStartScheduler+0x130>)
 8004116:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800411a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800411c:	f000 f954 	bl	80043c8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <xPortStartScheduler+0x134>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004126:	f000 f973 	bl	8004410 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <xPortStartScheduler+0x138>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a0f      	ldr	r2, [pc, #60]	; (800416c <xPortStartScheduler+0x138>)
 8004130:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004134:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004136:	f7ff ff67 	bl	8004008 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800413a:	f7ff f871 	bl	8003220 <vTaskSwitchContext>
    prvTaskExitError();
 800413e:	f7ff ff21 	bl	8003f84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	e000ed00 	.word	0xe000ed00
 8004150:	410fc271 	.word	0x410fc271
 8004154:	410fc270 	.word	0x410fc270
 8004158:	e000e400 	.word	0xe000e400
 800415c:	200001d4 	.word	0x200001d4
 8004160:	200001d8 	.word	0x200001d8
 8004164:	e000ed20 	.word	0xe000ed20
 8004168:	20000010 	.word	0x20000010
 800416c:	e000ef34 	.word	0xe000ef34

08004170 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <vInitPrioGroupValue+0xdc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a35      	ldr	r2, [pc, #212]	; (8004250 <vInitPrioGroupValue+0xe0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <vInitPrioGroupValue+0x24>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e7fe      	b.n	8004192 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <vInitPrioGroupValue+0xdc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a2e      	ldr	r2, [pc, #184]	; (8004254 <vInitPrioGroupValue+0xe4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d109      	bne.n	80041b2 <vInitPrioGroupValue+0x42>
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e7fe      	b.n	80041b0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041b2:	4b29      	ldr	r3, [pc, #164]	; (8004258 <vInitPrioGroupValue+0xe8>)
 80041b4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <vInitPrioGroupValue+0xec>)
 80041d8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <vInitPrioGroupValue+0xf0>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e0:	e009      	b.n	80041f6 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 80041e2:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <vInitPrioGroupValue+0xf0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <vInitPrioGroupValue+0xf0>)
 80041ea:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b80      	cmp	r3, #128	; 0x80
 8004200:	d0ef      	beq.n	80041e2 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <vInitPrioGroupValue+0xf0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1c3 0307 	rsb	r3, r3, #7
 800420a:	2b04      	cmp	r3, #4
 800420c:	d009      	beq.n	8004222 <vInitPrioGroupValue+0xb2>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	e7fe      	b.n	8004220 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <vInitPrioGroupValue+0xf0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <vInitPrioGroupValue+0xf0>)
 800422a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <vInitPrioGroupValue+0xf0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <vInitPrioGroupValue+0xf0>)
 8004236:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00
 8004250:	410fc271 	.word	0x410fc271
 8004254:	410fc270 	.word	0x410fc270
 8004258:	e000e400 	.word	0xe000e400
 800425c:	200001d4 	.word	0x200001d4
 8004260:	200001d8 	.word	0x200001d8

08004264 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <vPortEnterCritical+0x54>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <vPortEnterCritical+0x54>)
 8004284:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <vPortEnterCritical+0x54>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10e      	bne.n	80042ac <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <vPortEnterCritical+0x58>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <vPortEnterCritical+0x48>
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	e7fe      	b.n	80042aa <vPortEnterCritical+0x46>
    }
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20000010 	.word	0x20000010
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <vPortExitCritical+0x4c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <vPortExitCritical+0x22>
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e7fe      	b.n	80042e0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <vPortExitCritical+0x4c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	4a08      	ldr	r2, [pc, #32]	; (800430c <vPortExitCritical+0x4c>)
 80042ea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <vPortExitCritical+0x4c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <vPortExitCritical+0x3e>
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000010 	.word	0x20000010

08004310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004310:	f3ef 8009 	mrs	r0, PSP
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <pxCurrentTCBConst>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f01e 0f10 	tst.w	lr, #16
 8004320:	bf08      	it	eq
 8004322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	6010      	str	r0, [r2, #0]
 800432c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004334:	f380 8811 	msr	BASEPRI, r0
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f7fe ff6e 	bl	8003220 <vTaskSwitchContext>
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f380 8811 	msr	BASEPRI, r0
 800434c:	bc09      	pop	{r0, r3}
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	6808      	ldr	r0, [r1, #0]
 8004352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004356:	f01e 0f10 	tst.w	lr, #16
 800435a:	bf08      	it	eq
 800435c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004360:	f380 8809 	msr	PSP, r0
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst>:
 8004370:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
        __asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004390:	f001 fdb4 	bl	8005efc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004394:	f7fe fe88 	bl	80030a8 <xTaskIncrementTick>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800439e:	f001 fe0b 	bl	8005fb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <SysTick_Handler+0x4c>)
 80043a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e001      	b.n	80043b0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80043ac:	f001 fde8 	bl	8005f80 <SEGGER_SYSVIEW_RecordExitISR>
 80043b0:	2300      	movs	r3, #0
 80043b2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <vPortSetupTimerInterrupt+0x34>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <vPortSetupTimerInterrupt+0x38>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <vPortSetupTimerInterrupt+0x3c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <vPortSetupTimerInterrupt+0x40>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	099b      	lsrs	r3, r3, #6
 80043e4:	4a09      	ldr	r2, [pc, #36]	; (800440c <vPortSetupTimerInterrupt+0x44>)
 80043e6:	3b01      	subs	r3, #1
 80043e8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <vPortSetupTimerInterrupt+0x34>)
 80043ec:	2207      	movs	r2, #7
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000e010 	.word	0xe000e010
 8004400:	e000e018 	.word	0xe000e018
 8004404:	20000000 	.word	0x20000000
 8004408:	10624dd3 	.word	0x10624dd3
 800440c:	e000e014 	.word	0xe000e014

08004410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004410:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004420 <vPortEnableVFP+0x10>
 8004414:	6801      	ldr	r1, [r0, #0]
 8004416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800441a:	6001      	str	r1, [r0, #0]
 800441c:	4770      	bx	lr
 800441e:	0000      	.short	0x0000
 8004420:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800442e:	f3ef 8305 	mrs	r3, IPSR
 8004432:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d913      	bls.n	8004462 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800443a:	4a16      	ldr	r2, [pc, #88]	; (8004494 <vPortValidateInterruptPriority+0x6c>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004444:	4b14      	ldr	r3, [pc, #80]	; (8004498 <vPortValidateInterruptPriority+0x70>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	7afa      	ldrb	r2, [r7, #11]
 800444a:	429a      	cmp	r2, r3
 800444c:	d209      	bcs.n	8004462 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e7fe      	b.n	8004460 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <vPortValidateInterruptPriority+0x74>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <vPortValidateInterruptPriority+0x78>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d909      	bls.n	8004486 <vPortValidateInterruptPriority+0x5e>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	e7fe      	b.n	8004484 <vPortValidateInterruptPriority+0x5c>
    }
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000e3f0 	.word	0xe000e3f0
 8004498:	200001d4 	.word	0x200001d4
 800449c:	e000ed0c 	.word	0xe000ed0c
 80044a0:	200001d8 	.word	0x200001d8

080044a4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80044b0:	f7fe fd2a 	bl	8002f08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80044b4:	4b63      	ldr	r3, [pc, #396]	; (8004644 <pvPortMalloc+0x1a0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80044bc:	f000 f92e 	bl	800471c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044c0:	4b61      	ldr	r3, [pc, #388]	; (8004648 <pvPortMalloc+0x1a4>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 80a5 	bne.w	8004618 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02c      	beq.n	800452e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80044d4:	2208      	movs	r2, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d226      	bcs.n	800452e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80044e0:	2208      	movs	r2, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d020      	beq.n	8004534 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f023 0307 	bic.w	r3, r3, #7
 80044f8:	3308      	adds	r3, #8
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d213      	bcs.n	8004528 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	3308      	adds	r3, #8
 8004508:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00f      	beq.n	8004534 <pvPortMalloc+0x90>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e7fe      	b.n	8004526 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800452c:	e002      	b.n	8004534 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	e000      	b.n	8004536 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004534:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d06d      	beq.n	8004618 <pvPortMalloc+0x174>
 800453c:	4b43      	ldr	r3, [pc, #268]	; (800464c <pvPortMalloc+0x1a8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d868      	bhi.n	8004618 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004546:	4b42      	ldr	r3, [pc, #264]	; (8004650 <pvPortMalloc+0x1ac>)
 8004548:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <pvPortMalloc+0x1ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004550:	e004      	b.n	800455c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d903      	bls.n	800456e <pvPortMalloc+0xca>
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f1      	bne.n	8004552 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800456e:	4b35      	ldr	r3, [pc, #212]	; (8004644 <pvPortMalloc+0x1a0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	429a      	cmp	r2, r3
 8004576:	d04f      	beq.n	8004618 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2208      	movs	r2, #8
 800457e:	4413      	add	r3, r2
 8004580:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	1ad2      	subs	r2, r2, r3
 8004592:	2308      	movs	r3, #8
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	429a      	cmp	r2, r3
 8004598:	d91e      	bls.n	80045d8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <pvPortMalloc+0x11c>
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e7fe      	b.n	80045be <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad2      	subs	r2, r2, r3
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045d2:	69b8      	ldr	r0, [r7, #24]
 80045d4:	f000 f904 	bl	80047e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045d8:	4b1c      	ldr	r3, [pc, #112]	; (800464c <pvPortMalloc+0x1a8>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	4a1a      	ldr	r2, [pc, #104]	; (800464c <pvPortMalloc+0x1a8>)
 80045e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <pvPortMalloc+0x1a8>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <pvPortMalloc+0x1b0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d203      	bcs.n	80045fa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <pvPortMalloc+0x1a8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a17      	ldr	r2, [pc, #92]	; (8004654 <pvPortMalloc+0x1b0>)
 80045f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <pvPortMalloc+0x1a4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	431a      	orrs	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <pvPortMalloc+0x1b4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a10      	ldr	r2, [pc, #64]	; (8004658 <pvPortMalloc+0x1b4>)
 8004616:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004618:	f7fe fc84 	bl	8002f24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <pvPortMalloc+0x196>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e7fe      	b.n	8004638 <pvPortMalloc+0x194>
    return pvReturn;
 800463a:	69fb      	ldr	r3, [r7, #28]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3728      	adds	r7, #40	; 0x28
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20012de4 	.word	0x20012de4
 8004648:	20012df8 	.word	0x20012df8
 800464c:	20012de8 	.word	0x20012de8
 8004650:	20012ddc 	.word	0x20012ddc
 8004654:	20012dec 	.word	0x20012dec
 8004658:	20012df0 	.word	0x20012df0

0800465c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04b      	beq.n	8004706 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800466e:	2308      	movs	r3, #8
 8004670:	425b      	negs	r3, r3
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4413      	add	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4b23      	ldr	r3, [pc, #140]	; (8004710 <vPortFree+0xb4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <vPortFree+0x42>
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e7fe      	b.n	800469c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <vPortFree+0x5e>
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	e7fe      	b.n	80046b8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <vPortFree+0xb4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01e      	beq.n	8004706 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11a      	bne.n	8004706 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <vPortFree+0xb4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	43db      	mvns	r3, r3
 80046da:	401a      	ands	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80046e0:	f7fe fc12 	bl	8002f08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <vPortFree+0xb8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4413      	add	r3, r2
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <vPortFree+0xb8>)
 80046f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046f2:	6938      	ldr	r0, [r7, #16]
 80046f4:	f000 f874 	bl	80047e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <vPortFree+0xbc>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4a06      	ldr	r2, [pc, #24]	; (8004718 <vPortFree+0xbc>)
 8004700:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004702:	f7fe fc0f 	bl	8002f24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20012df8 	.word	0x20012df8
 8004714:	20012de8 	.word	0x20012de8
 8004718:	20012df4 	.word	0x20012df4

0800471c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004722:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004726:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <prvHeapInit+0xac>)
 800472a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3307      	adds	r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <prvHeapInit+0xac>)
 800474c:	4413      	add	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <prvHeapInit+0xb0>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <prvHeapInit+0xb0>)
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004768:	2208      	movs	r2, #8
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0307 	bic.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <prvHeapInit+0xb4>)
 800477c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <prvHeapInit+0xb4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <prvHeapInit+0xb4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <prvHeapInit+0xb4>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <prvHeapInit+0xb8>)
 80047aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <prvHeapInit+0xbc>)
 80047b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <prvHeapInit+0xc0>)
 80047b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	200001dc 	.word	0x200001dc
 80047cc:	20012ddc 	.word	0x20012ddc
 80047d0:	20012de4 	.word	0x20012de4
 80047d4:	20012dec 	.word	0x20012dec
 80047d8:	20012de8 	.word	0x20012de8
 80047dc:	20012df8 	.word	0x20012df8

080047e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <prvInsertBlockIntoFreeList+0xac>)
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e002      	b.n	80047f4 <prvInsertBlockIntoFreeList+0x14>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d8f7      	bhi.n	80047ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d108      	bne.n	8004822 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d118      	bne.n	8004868 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <prvInsertBlockIntoFreeList+0xb0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d00d      	beq.n	800485e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	441a      	add	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e008      	b.n	8004870 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <prvInsertBlockIntoFreeList+0xb0>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e003      	b.n	8004870 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d002      	beq.n	800487e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20012ddc 	.word	0x20012ddc
 8004890:	20012de4 	.word	0x20012de4

08004894 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004898:	4803      	ldr	r0, [pc, #12]	; (80048a8 <_cbSendSystemDesc+0x14>)
 800489a:	f001 fadb 	bl	8005e54 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800489e:	4803      	ldr	r0, [pc, #12]	; (80048ac <_cbSendSystemDesc+0x18>)
 80048a0:	f001 fad8 	bl	8005e54 <SEGGER_SYSVIEW_SendSysDesc>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	08006ee4 	.word	0x08006ee4
 80048ac:	08006f20 	.word	0x08006f20

080048b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80048be:	4a06      	ldr	r2, [pc, #24]	; (80048d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80048c0:	f000 fe46 	bl	8005550 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80048c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80048c8:	f000 fe86 	bl	80055d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000000 	.word	0x20000000
 80048d4:	08004895 	.word	0x08004895
 80048d8:	08006fc0 	.word	0x08006fc0

080048dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048de:	b085      	sub	sp, #20
 80048e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	e034      	b.n	8004952 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80048e8:	491e      	ldr	r1, [pc, #120]	; (8004964 <_cbSendTaskList+0x88>)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	491a      	ldr	r1, [pc, #104]	; (8004964 <_cbSendTaskList+0x88>)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	3304      	adds	r3, #4
 8004908:	681c      	ldr	r4, [r3, #0]
 800490a:	4916      	ldr	r1, [pc, #88]	; (8004964 <_cbSendTaskList+0x88>)
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3308      	adds	r3, #8
 800491a:	681d      	ldr	r5, [r3, #0]
 800491c:	4911      	ldr	r1, [pc, #68]	; (8004964 <_cbSendTaskList+0x88>)
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	330c      	adds	r3, #12
 800492c:	681e      	ldr	r6, [r3, #0]
 800492e:	490d      	ldr	r1, [pc, #52]	; (8004964 <_cbSendTaskList+0x88>)
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3310      	adds	r3, #16
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4633      	mov	r3, r6
 8004944:	462a      	mov	r2, r5
 8004946:	4621      	mov	r1, r4
 8004948:	f000 f8b4 	bl	8004ab4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3301      	adds	r3, #1
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <_cbSendTaskList+0x8c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3c5      	bcc.n	80048e8 <_cbSendTaskList+0xc>
  }
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004964:	20012dfc 	.word	0x20012dfc
 8004968:	20012e9c 	.word	0x20012e9c

0800496c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004972:	f7fe fb87 	bl	8003084 <xTaskGetTickCountFromISR>
 8004976:	4603      	mov	r3, r0
 8004978:	f04f 0400 	mov.w	r4, #0
 800497c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004980:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004984:	462b      	mov	r3, r5
 8004986:	4634      	mov	r4, r6
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	0162      	lsls	r2, r4, #5
 8004992:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004996:	0159      	lsls	r1, r3, #5
 8004998:	460b      	mov	r3, r1
 800499a:	4614      	mov	r4, r2
 800499c:	1b5b      	subs	r3, r3, r5
 800499e:	eb64 0406 	sbc.w	r4, r4, r6
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	00a2      	lsls	r2, r4, #2
 80049ac:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80049b0:	0099      	lsls	r1, r3, #2
 80049b2:	460b      	mov	r3, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	195b      	adds	r3, r3, r5
 80049b8:	eb44 0406 	adc.w	r4, r4, r6
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	00e2      	lsls	r2, r4, #3
 80049c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049ca:	00d9      	lsls	r1, r3, #3
 80049cc:	460b      	mov	r3, r1
 80049ce:	4614      	mov	r4, r2
 80049d0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80049d4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	4621      	mov	r1, r4
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080049e4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80049f2:	2205      	movs	r2, #5
 80049f4:	492b      	ldr	r1, [pc, #172]	; (8004aa4 <SYSVIEW_AddTask+0xc0>)
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f001 fdba 	bl	8006570 <memcmp>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04b      	beq.n	8004a9a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004a02:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b07      	cmp	r3, #7
 8004a08:	d903      	bls.n	8004a12 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004a0a:	4828      	ldr	r0, [pc, #160]	; (8004aac <SYSVIEW_AddTask+0xc8>)
 8004a0c:	f001 fd1e 	bl	800644c <SEGGER_SYSVIEW_Warn>
    return;
 8004a10:	e044      	b.n	8004a9c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004a12:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4926      	ldr	r1, [pc, #152]	; (8004ab0 <SYSVIEW_AddTask+0xcc>)
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004a26:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4921      	ldr	r1, [pc, #132]	; (8004ab0 <SYSVIEW_AddTask+0xcc>)
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3304      	adds	r3, #4
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <SYSVIEW_AddTask+0xcc>)
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4916      	ldr	r1, [pc, #88]	; (8004ab0 <SYSVIEW_AddTask+0xcc>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	330c      	adds	r3, #12
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <SYSVIEW_AddTask+0xcc>)
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3310      	adds	r3, #16
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <SYSVIEW_AddTask+0xc4>)
 8004a86:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f80e 	bl	8004ab4 <SYSVIEW_SendTaskInfo>
 8004a98:	e000      	b.n	8004a9c <SYSVIEW_AddTask+0xb8>
    return;
 8004a9a:	bf00      	nop

}
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	08006f30 	.word	0x08006f30
 8004aa8:	20012e9c 	.word	0x20012e9c
 8004aac:	08006f38 	.word	0x08006f38
 8004ab0:	20012dfc 	.word	0x20012dfc

08004ab4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	2214      	movs	r2, #20
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fd6a 	bl	80065a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f8bb 	bl	8005c64 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004aee:	bf00      	nop
 8004af0:	3728      	adds	r7, #40	; 0x28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <_DoInit+0x98>)
 8004b00:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2203      	movs	r2, #3
 8004b06:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <_DoInit+0x9c>)
 8004b12:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <_DoInit+0xa0>)
 8004b18:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b20:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <_DoInit+0x9c>)
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <_DoInit+0xa4>)
 8004b3e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2210      	movs	r2, #16
 8004b44:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3307      	adds	r3, #7
 8004b5c:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <_DoInit+0xa8>)
 8004b5e:	6810      	ldr	r0, [r2, #0]
 8004b60:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b62:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a0e      	ldr	r2, [pc, #56]	; (8004ba4 <_DoInit+0xac>)
 8004b6a:	6810      	ldr	r0, [r2, #0]
 8004b6c:	6018      	str	r0, [r3, #0]
 8004b6e:	8891      	ldrh	r1, [r2, #4]
 8004b70:	7992      	ldrb	r2, [r2, #6]
 8004b72:	8099      	strh	r1, [r3, #4]
 8004b74:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b76:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b80:	f3bf 8f5f 	dmb	sy
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	2001445c 	.word	0x2001445c
 8004b94:	08006f88 	.word	0x08006f88
 8004b98:	20012ea0 	.word	0x20012ea0
 8004b9c:	200132a0 	.word	0x200132a0
 8004ba0:	08006f94 	.word	0x08006f94
 8004ba4:	08006f98 	.word	0x08006f98

08004ba8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d905      	bls.n	8004bd8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	e007      	b.n	8004be8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	1acb      	subs	r3, r1, r3
 8004be2:	4413      	add	r3, r2
 8004be4:	3b01      	subs	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	bf28      	it	cs
 8004bf6:	4613      	movcs	r3, r2
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	bf28      	it	cs
 8004c02:	4613      	movcs	r3, r2
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f001 fcba 	bl	800658e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004c1a:	6a3a      	ldr	r2, [r7, #32]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	4413      	add	r3, r2
 8004c20:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	4413      	add	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	4413      	add	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d101      	bne.n	8004c48 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1b2      	bne.n	8004bbe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004c58:	6a3b      	ldr	r3, [r7, #32]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3728      	adds	r7, #40	; 0x28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d911      	bls.n	8004caa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	6938      	ldr	r0, [r7, #16]
 8004c96:	f001 fc7a 	bl	800658e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c9a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004ca8:	e01f      	b.n	8004cea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	6938      	ldr	r0, [r7, #16]
 8004cbe:	f001 fc66 	bl	800658e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6938      	ldr	r0, [r7, #16]
 8004cdc:	f001 fc57 	bl	800658e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ce0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	60da      	str	r2, [r3, #12]
}
 8004cea:	bf00      	nop
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d808      	bhi.n	8004d20 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad2      	subs	r2, r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4413      	add	r3, r2
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e004      	b.n	8004d2a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	; 0x30
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d44:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <SEGGER_RTT_ReadNoLock+0x1e>
 8004d52:	f7ff fed1 	bl	8004af8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	3360      	adds	r3, #96	; 0x60
 8004d62:	4a37      	ldr	r2, [pc, #220]	; (8004e40 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d64:	4413      	add	r3, r2
 8004d66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d92b      	bls.n	8004ddc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4293      	cmp	r3, r2
 8004d94:	bf28      	it	cs
 8004d96:	4613      	movcs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	4413      	add	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	6939      	ldr	r1, [r7, #16]
 8004da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004daa:	f001 fbf0 	bl	800658e <memcpy>
    NumBytesRead += NumBytesRem;
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d101      	bne.n	8004ddc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bf28      	it	cs
 8004dec:	4613      	movcs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d019      	beq.n	8004e2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	4413      	add	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e06:	f001 fbc2 	bl	800658e <memcpy>
    NumBytesRead += NumBytesRem;
 8004e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	4413      	add	r3, r2
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3730      	adds	r7, #48	; 0x30
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	2001445c 	.word	0x2001445c

08004e44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <SEGGER_RTT_WriteNoLock+0x98>)
 8004e62:	4413      	add	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d017      	beq.n	8004e9e <SEGGER_RTT_WriteNoLock+0x5a>
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d302      	bcc.n	8004e78 <SEGGER_RTT_WriteNoLock+0x34>
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d023      	beq.n	8004ebe <SEGGER_RTT_WriteNoLock+0x7a>
 8004e76:	e029      	b.n	8004ecc <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e78:	6978      	ldr	r0, [r7, #20]
 8004e7a:	f7ff ff3a 	bl	8004cf2 <_GetAvailWriteSpace>
 8004e7e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d202      	bcs.n	8004e8e <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004e8c:	e021      	b.n	8004ed2 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff fee3 	bl	8004c62 <_WriteNoCheck>
    break;
 8004e9c:	e019      	b.n	8004ed2 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f7ff ff27 	bl	8004cf2 <_GetAvailWriteSpace>
 8004ea4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	bf28      	it	cs
 8004eae:	4613      	movcs	r3, r2
 8004eb0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f7ff fed3 	bl	8004c62 <_WriteNoCheck>
    break;
 8004ebc:	e009      	b.n	8004ed2 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	6978      	ldr	r0, [r7, #20]
 8004ec4:	f7ff fe70 	bl	8004ba8 <_WriteBlocking>
 8004ec8:	61f8      	str	r0, [r7, #28]
    break;
 8004eca:	e002      	b.n	8004ed2 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
    break;
 8004ed0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	2001445c 	.word	0x2001445c

08004ee0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <SEGGER_RTT_Write+0x48>)
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <SEGGER_RTT_Write+0x1e>
 8004efa:	f7ff fdfd 	bl	8004af8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004efe:	f3ef 8311 	mrs	r3, BASEPRI
 8004f02:	f04f 0120 	mov.w	r1, #32
 8004f06:	f381 8811 	msr	BASEPRI, r1
 8004f0a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff ff97 	bl	8004e44 <SEGGER_RTT_WriteNoLock>
 8004f16:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004f1e:	697b      	ldr	r3, [r7, #20]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	2001445c 	.word	0x2001445c

08004f2c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f48:	f7ff fdd6 	bl	8004af8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f50:	f04f 0120 	mov.w	r1, #32
 8004f54:	f381 8811 	msr	BASEPRI, r1
 8004f58:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f5a:	4b35      	ldr	r3, [pc, #212]	; (8005030 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f5c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f62:	6939      	ldr	r1, [r7, #16]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	3304      	adds	r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	dbeb      	blt.n	8004f62 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f8a:	e000      	b.n	8004f8e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f8c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	da3f      	bge.n	8005018 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004fac:	6939      	ldr	r1, [r7, #16]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	3320      	adds	r3, #32
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3328      	adds	r3, #40	; 0x28
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3324      	adds	r3, #36	; 0x24
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004ffe:	6939      	ldr	r1, [r7, #16]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	440b      	add	r3, r1
 800500c:	332c      	adds	r3, #44	; 0x2c
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005012:	f3bf 8f5f 	dmb	sy
 8005016:	e002      	b.n	800501e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005024:	69fb      	ldr	r3, [r7, #28]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2001445c 	.word	0x2001445c

08005034 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005050:	f7ff fd52 	bl	8004af8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005054:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005056:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	461a      	mov	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4293      	cmp	r3, r2
 8005062:	d24d      	bcs.n	8005100 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d031      	beq.n	80050dc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	3360      	adds	r3, #96	; 0x60
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	3364      	adds	r3, #100	; 0x64
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3368      	adds	r3, #104	; 0x68
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80050b4:	6979      	ldr	r1, [r7, #20]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	440b      	add	r3, r1
 80050c2:	3370      	adds	r3, #112	; 0x70
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	336c      	adds	r3, #108	; 0x6c
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	3374      	adds	r3, #116	; 0x74
 80050ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ee:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e002      	b.n	8005106 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005100:	f04f 33ff 	mov.w	r3, #4294967295
 8005104:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005106:	69fb      	ldr	r3, [r7, #28]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	2001445c 	.word	0x2001445c

08005114 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005124:	e002      	b.n	800512c <_EncodeStr+0x18>
    Len++;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3301      	adds	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f6      	bne.n	8005126 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d901      	bls.n	8005144 <_EncodeStr+0x30>
    Len = Limit;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2bfe      	cmp	r3, #254	; 0xfe
 8005148:	d806      	bhi.n	8005158 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	60fa      	str	r2, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e011      	b.n	800517c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	60fa      	str	r2, [r7, #12]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	0a19      	lsrs	r1, r3, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	60fa      	str	r2, [r7, #12]
 8005178:	b2ca      	uxtb	r2, r1
 800517a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005180:	e00a      	b.n	8005198 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	1c53      	adds	r3, r2, #1
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	60f9      	str	r1, [r7, #12]
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	701a      	strb	r2, [r3, #0]
    n++;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3301      	adds	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3f0      	bcc.n	8005182 <_EncodeStr+0x6e>
  }
  return pPayload;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051ce:	4b33      	ldr	r3, [pc, #204]	; (800529c <_HandleIncomingPacket+0xd4>)
 80051d0:	7e1b      	ldrb	r3, [r3, #24]
 80051d2:	4618      	mov	r0, r3
 80051d4:	1cfb      	adds	r3, r7, #3
 80051d6:	2201      	movs	r2, #1
 80051d8:	4619      	mov	r1, r3
 80051da:	f7ff fdad 	bl	8004d38 <SEGGER_RTT_ReadNoLock>
 80051de:	4603      	mov	r3, r0
 80051e0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	dd4d      	ble.n	8005284 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d022      	beq.n	8005234 <_HandleIncomingPacket+0x6c>
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	dc0b      	bgt.n	800520a <_HandleIncomingPacket+0x42>
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d015      	beq.n	8005222 <_HandleIncomingPacket+0x5a>
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	dc02      	bgt.n	8005200 <_HandleIncomingPacket+0x38>
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d00e      	beq.n	800521c <_HandleIncomingPacket+0x54>
 80051fe:	e034      	b.n	800526a <_HandleIncomingPacket+0xa2>
 8005200:	2b03      	cmp	r3, #3
 8005202:	d011      	beq.n	8005228 <_HandleIncomingPacket+0x60>
 8005204:	2b04      	cmp	r3, #4
 8005206:	d012      	beq.n	800522e <_HandleIncomingPacket+0x66>
 8005208:	e02f      	b.n	800526a <_HandleIncomingPacket+0xa2>
 800520a:	2b07      	cmp	r3, #7
 800520c:	d018      	beq.n	8005240 <_HandleIncomingPacket+0x78>
 800520e:	2b07      	cmp	r3, #7
 8005210:	db13      	blt.n	800523a <_HandleIncomingPacket+0x72>
 8005212:	2b7f      	cmp	r3, #127	; 0x7f
 8005214:	d038      	beq.n	8005288 <_HandleIncomingPacket+0xc0>
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d015      	beq.n	8005246 <_HandleIncomingPacket+0x7e>
 800521a:	e026      	b.n	800526a <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800521c:	f000 fba8 	bl	8005970 <SEGGER_SYSVIEW_Start>
      break;
 8005220:	e037      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005222:	f000 fc5f 	bl	8005ae4 <SEGGER_SYSVIEW_Stop>
      break;
 8005226:	e034      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005228:	f000 fe38 	bl	8005e9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800522c:	e031      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800522e:	f000 fdfd 	bl	8005e2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005232:	e02e      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005234:	f000 fc7c 	bl	8005b30 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005238:	e02b      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800523a:	f001 f8c9 	bl	80063d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800523e:	e028      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005240:	f001 f8a8 	bl	8006394 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005244:	e025      	b.n	8005292 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <_HandleIncomingPacket+0xd4>)
 8005248:	7e1b      	ldrb	r3, [r3, #24]
 800524a:	4618      	mov	r0, r3
 800524c:	1cfb      	adds	r3, r7, #3
 800524e:	2201      	movs	r2, #1
 8005250:	4619      	mov	r1, r3
 8005252:	f7ff fd71 	bl	8004d38 <SEGGER_RTT_ReadNoLock>
 8005256:	4603      	mov	r3, r0
 8005258:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	dd15      	ble.n	800528c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	4618      	mov	r0, r3
 8005264:	f001 f816 	bl	8006294 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005268:	e010      	b.n	800528c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	b25b      	sxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	da0e      	bge.n	8005290 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <_HandleIncomingPacket+0xd4>)
 8005274:	7e1b      	ldrb	r3, [r3, #24]
 8005276:	4618      	mov	r0, r3
 8005278:	1cfb      	adds	r3, r7, #3
 800527a:	2201      	movs	r2, #1
 800527c:	4619      	mov	r1, r3
 800527e:	f7ff fd5b 	bl	8004d38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005282:	e005      	b.n	8005290 <_HandleIncomingPacket+0xc8>
    }
  }
 8005284:	bf00      	nop
 8005286:	e004      	b.n	8005292 <_HandleIncomingPacket+0xca>
      break;
 8005288:	bf00      	nop
 800528a:	e002      	b.n	8005292 <_HandleIncomingPacket+0xca>
      break;
 800528c:	bf00      	nop
 800528e:	e000      	b.n	8005292 <_HandleIncomingPacket+0xca>
      break;
 8005290:	bf00      	nop
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200142b8 	.word	0x200142b8

080052a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80052a6:	2301      	movs	r3, #1
 80052a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b4:	4b31      	ldr	r3, [pc, #196]	; (800537c <_TrySendOverflowPacket+0xdc>)
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ba:	e00b      	b.n	80052d4 <_TrySendOverflowPacket+0x34>
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b7f      	cmp	r3, #127	; 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <_TrySendOverflowPacket+0x1c>
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <_TrySendOverflowPacket+0xe0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <_TrySendOverflowPacket+0xdc>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e00b      	b.n	800531c <_TrySendOverflowPacket+0x7c>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	6279      	str	r1, [r7, #36]	; 0x24
 800530e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	09db      	lsrs	r3, r3, #7
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b7f      	cmp	r3, #127	; 0x7f
 8005320:	d8f0      	bhi.n	8005304 <_TrySendOverflowPacket+0x64>
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	627a      	str	r2, [r7, #36]	; 0x24
 8005328:	6a3a      	ldr	r2, [r7, #32]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	4618      	mov	r0, r3
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	461a      	mov	r2, r3
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	4619      	mov	r1, r3
 8005344:	f7fa ff64 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005348:	4603      	mov	r3, r0
 800534a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005352:	4a0a      	ldr	r2, [pc, #40]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <_TrySendOverflowPacket+0xdc>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e004      	b.n	8005370 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	3301      	adds	r3, #1
 800536c:	4a03      	ldr	r2, [pc, #12]	; (800537c <_TrySendOverflowPacket+0xdc>)
 800536e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005370:	693b      	ldr	r3, [r7, #16]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3730      	adds	r7, #48	; 0x30
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200142b8 	.word	0x200142b8
 8005380:	e0001004 	.word	0xe0001004

08005384 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005390:	4b6c      	ldr	r3, [pc, #432]	; (8005544 <_SendPacket+0x1c0>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d010      	beq.n	80053ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <_SendPacket+0x1c0>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80a3 	beq.w	80054e8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80053a2:	4b68      	ldr	r3, [pc, #416]	; (8005544 <_SendPacket+0x1c0>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d109      	bne.n	80053be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80053aa:	f7ff ff79 	bl	80052a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053ae:	4b65      	ldr	r3, [pc, #404]	; (8005544 <_SendPacket+0x1c0>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f040 809a 	bne.w	80054ec <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80053b8:	e001      	b.n	80053be <_SendPacket+0x3a>
    goto Send;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <_SendPacket+0x3c>
Send:
 80053be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	d809      	bhi.n	80053da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053c6:	4b5f      	ldr	r3, [pc, #380]	; (8005544 <_SendPacket+0x1c0>)
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 808b 	bne.w	80054f0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b17      	cmp	r3, #23
 80053de:	d807      	bhi.n	80053f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e03d      	b.n	800546c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d912      	bls.n	8005424 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	09da      	lsrs	r2, r3, #7
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b01      	subs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	3a01      	subs	r2, #1
 8005416:	60fa      	str	r2, [r7, #12]
 8005418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e006      	b.n	8005432 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3b01      	subs	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b7f      	cmp	r3, #127	; 0x7f
 8005436:	d912      	bls.n	800545e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	09da      	lsrs	r2, r3, #7
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b01      	subs	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	3a01      	subs	r2, #1
 8005450:	60fa      	str	r2, [r7, #12]
 8005452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005456:	b2da      	uxtb	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e006      	b.n	800546c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3b01      	subs	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800546c:	4b36      	ldr	r3, [pc, #216]	; (8005548 <_SendPacket+0x1c4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <_SendPacket+0x1c0>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	e00b      	b.n	800549e <_SendPacket+0x11a>
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	1c59      	adds	r1, r3, #1
 800548e:	6279      	str	r1, [r7, #36]	; 0x24
 8005490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	2b7f      	cmp	r3, #127	; 0x7f
 80054a2:	d8f0      	bhi.n	8005486 <_SendPacket+0x102>
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	627a      	str	r2, [r7, #36]	; 0x24
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80054b4:	4b23      	ldr	r3, [pc, #140]	; (8005544 <_SendPacket+0x1c0>)
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	4618      	mov	r0, r3
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f7fa fea4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054c8:	4603      	mov	r3, r0
 80054ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054d2:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <_SendPacket+0x1c0>)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	60d3      	str	r3, [r2, #12]
 80054d8:	e00b      	b.n	80054f2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <_SendPacket+0x1c0>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	4b18      	ldr	r3, [pc, #96]	; (8005544 <_SendPacket+0x1c0>)
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e004      	b.n	80054f2 <_SendPacket+0x16e>
    goto SendDone;
 80054e8:	bf00      	nop
 80054ea:	e002      	b.n	80054f2 <_SendPacket+0x16e>
      goto SendDone;
 80054ec:	bf00      	nop
 80054ee:	e000      	b.n	80054f2 <_SendPacket+0x16e>
      goto SendDone;
 80054f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <_SendPacket+0x1c0>)
 80054f4:	7e1b      	ldrb	r3, [r3, #24]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <_SendPacket+0x1c8>)
 80054fa:	460b      	mov	r3, r1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	440b      	add	r3, r1
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4413      	add	r3, r2
 8005504:	336c      	adds	r3, #108	; 0x6c
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <_SendPacket+0x1c0>)
 800550a:	7e1b      	ldrb	r3, [r3, #24]
 800550c:	4618      	mov	r0, r3
 800550e:	490f      	ldr	r1, [pc, #60]	; (800554c <_SendPacket+0x1c8>)
 8005510:	4603      	mov	r3, r0
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4403      	add	r3, r0
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	440b      	add	r3, r1
 800551a:	3370      	adds	r3, #112	; 0x70
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d00b      	beq.n	800553a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <_SendPacket+0x1c0>)
 8005524:	789b      	ldrb	r3, [r3, #2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <_SendPacket+0x1c0>)
 800552c:	2201      	movs	r2, #1
 800552e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005530:	f7ff fe4a 	bl	80051c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <_SendPacket+0x1c0>)
 8005536:	2200      	movs	r2, #0
 8005538:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800553a:	bf00      	nop
 800553c:	3728      	adds	r7, #40	; 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200142b8 	.word	0x200142b8
 8005548:	e0001004 	.word	0xe0001004
 800554c:	2001445c 	.word	0x2001445c

08005550 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800555e:	2300      	movs	r3, #0
 8005560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005564:	4917      	ldr	r1, [pc, #92]	; (80055c4 <SEGGER_SYSVIEW_Init+0x74>)
 8005566:	4818      	ldr	r0, [pc, #96]	; (80055c8 <SEGGER_SYSVIEW_Init+0x78>)
 8005568:	f7ff fce0 	bl	8004f2c <SEGGER_RTT_AllocUpBuffer>
 800556c:	4603      	mov	r3, r0
 800556e:	b2da      	uxtb	r2, r3
 8005570:	4b16      	ldr	r3, [pc, #88]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005572:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005574:	4b15      	ldr	r3, [pc, #84]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005576:	785a      	ldrb	r2, [r3, #1]
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 800557a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 800557e:	7e1b      	ldrb	r3, [r3, #24]
 8005580:	4618      	mov	r0, r3
 8005582:	2300      	movs	r3, #0
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	2308      	movs	r3, #8
 8005588:	4a11      	ldr	r2, [pc, #68]	; (80055d0 <SEGGER_SYSVIEW_Init+0x80>)
 800558a:	490f      	ldr	r1, [pc, #60]	; (80055c8 <SEGGER_SYSVIEW_Init+0x78>)
 800558c:	f7ff fd52 	bl	8005034 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005592:	2200      	movs	r2, #0
 8005594:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <SEGGER_SYSVIEW_Init+0x84>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0c      	ldr	r2, [pc, #48]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 800559c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800559e:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80055a4:	4a09      	ldr	r2, [pc, #36]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80055b0:	4a06      	ldr	r2, [pc, #24]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <SEGGER_SYSVIEW_Init+0x7c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200132b0 	.word	0x200132b0
 80055c8:	08006fa0 	.word	0x08006fa0
 80055cc:	200142b8 	.word	0x200142b8
 80055d0:	200142b0 	.word	0x200142b0
 80055d4:	e0001004 	.word	0xe0001004

080055d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6113      	str	r3, [r2, #16]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	200142b8 	.word	0x200142b8

080055f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005600:	f3ef 8311 	mrs	r3, BASEPRI
 8005604:	f04f 0120 	mov.w	r1, #32
 8005608:	f381 8811 	msr	BASEPRI, r1
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4808      	ldr	r0, [pc, #32]	; (8005630 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005610:	f7ff fdcd 	bl	80051ae <_PreparePacket>
 8005614:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	68b8      	ldr	r0, [r7, #8]
 800561c:	f7ff feb2 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f383 8811 	msr	BASEPRI, r3
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	200142e8 	.word	0x200142e8

08005634 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800563e:	f3ef 8311 	mrs	r3, BASEPRI
 8005642:	f04f 0120 	mov.w	r1, #32
 8005646:	f381 8811 	msr	BASEPRI, r1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	4816      	ldr	r0, [pc, #88]	; (80056a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800564e:	f7ff fdae 	bl	80051ae <_PreparePacket>
 8005652:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e00b      	b.n	800567a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	1c59      	adds	r1, r3, #1
 800566a:	61f9      	str	r1, [r7, #28]
 800566c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	09db      	lsrs	r3, r3, #7
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b7f      	cmp	r3, #127	; 0x7f
 800567e:	d8f0      	bhi.n	8005662 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	61fa      	str	r2, [r7, #28]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	6938      	ldr	r0, [r7, #16]
 8005696:	f7ff fe75 	bl	8005384 <_SendPacket>
  RECORD_END();
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f383 8811 	msr	BASEPRI, r3
}
 80056a0:	bf00      	nop
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	200142e8 	.word	0x200142e8

080056ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056b8:	f3ef 8311 	mrs	r3, BASEPRI
 80056bc:	f04f 0120 	mov.w	r1, #32
 80056c0:	f381 8811 	msr	BASEPRI, r1
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	4825      	ldr	r0, [pc, #148]	; (800575c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056c8:	f7ff fd71 	bl	80051ae <_PreparePacket>
 80056cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056da:	e00b      	b.n	80056f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	09db      	lsrs	r3, r3, #7
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2b7f      	cmp	r3, #127	; 0x7f
 80056f8:	d8f0      	bhi.n	80056dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	623b      	str	r3, [r7, #32]
 8005712:	e00b      	b.n	800572c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	6279      	str	r1, [r7, #36]	; 0x24
 800571e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	09db      	lsrs	r3, r3, #7
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b7f      	cmp	r3, #127	; 0x7f
 8005730:	d8f0      	bhi.n	8005714 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	627a      	str	r2, [r7, #36]	; 0x24
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	69b8      	ldr	r0, [r7, #24]
 8005748:	f7ff fe1c 	bl	8005384 <_SendPacket>
  RECORD_END();
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f383 8811 	msr	BASEPRI, r3
}
 8005752:	bf00      	nop
 8005754:	3730      	adds	r7, #48	; 0x30
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200142e8 	.word	0x200142e8

08005760 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	; 0x38
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800576e:	f3ef 8311 	mrs	r3, BASEPRI
 8005772:	f04f 0120 	mov.w	r1, #32
 8005776:	f381 8811 	msr	BASEPRI, r1
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	4832      	ldr	r0, [pc, #200]	; (8005848 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800577e:	f7ff fd16 	bl	80051ae <_PreparePacket>
 8005782:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
 8005790:	e00b      	b.n	80057aa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	b2da      	uxtb	r2, r3
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	6379      	str	r1, [r7, #52]	; 0x34
 800579c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2b7f      	cmp	r3, #127	; 0x7f
 80057ae:	d8f0      	bhi.n	8005792 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	637a      	str	r2, [r7, #52]	; 0x34
 80057b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c8:	e00b      	b.n	80057e2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	09db      	lsrs	r3, r3, #7
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	2b7f      	cmp	r3, #127	; 0x7f
 80057e6:	d8f0      	bhi.n	80057ca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	e00b      	b.n	800581a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	1c59      	adds	r1, r3, #1
 800580a:	6279      	str	r1, [r7, #36]	; 0x24
 800580c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	09db      	lsrs	r3, r3, #7
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2b7f      	cmp	r3, #127	; 0x7f
 800581e:	d8f0      	bhi.n	8005802 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	627a      	str	r2, [r7, #36]	; 0x24
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	6979      	ldr	r1, [r7, #20]
 8005834:	69b8      	ldr	r0, [r7, #24]
 8005836:	f7ff fda5 	bl	8005384 <_SendPacket>
  RECORD_END();
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f383 8811 	msr	BASEPRI, r3
}
 8005840:	bf00      	nop
 8005842:	3738      	adds	r7, #56	; 0x38
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	200142e8 	.word	0x200142e8

0800584c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	; 0x40
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800585a:	f3ef 8311 	mrs	r3, BASEPRI
 800585e:	f04f 0120 	mov.w	r1, #32
 8005862:	f381 8811 	msr	BASEPRI, r1
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	4840      	ldr	r0, [pc, #256]	; (800596c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800586a:	f7ff fca0 	bl	80051ae <_PreparePacket>
 800586e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
 800587c:	e00b      	b.n	8005896 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	b2da      	uxtb	r2, r3
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	1c59      	adds	r1, r3, #1
 8005886:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	09db      	lsrs	r3, r3, #7
 8005894:	63bb      	str	r3, [r7, #56]	; 0x38
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b7f      	cmp	r3, #127	; 0x7f
 800589a:	d8f0      	bhi.n	800587e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800589c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
 80058b4:	e00b      	b.n	80058ce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	1c59      	adds	r1, r3, #1
 80058be:	6379      	str	r1, [r7, #52]	; 0x34
 80058c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	09db      	lsrs	r3, r3, #7
 80058cc:	633b      	str	r3, [r7, #48]	; 0x30
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	2b7f      	cmp	r3, #127	; 0x7f
 80058d2:	d8f0      	bhi.n	80058b6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	637a      	str	r2, [r7, #52]	; 0x34
 80058da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	e00b      	b.n	800593e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	6279      	str	r1, [r7, #36]	; 0x24
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	627a      	str	r2, [r7, #36]	; 0x24
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7ff fd13 	bl	8005384 <_SendPacket>
  RECORD_END();
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f383 8811 	msr	BASEPRI, r3
}
 8005964:	bf00      	nop
 8005966:	3740      	adds	r7, #64	; 0x40
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200142e8 	.word	0x200142e8

08005970 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b08c      	sub	sp, #48	; 0x30
 8005974:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005976:	4b58      	ldr	r3, [pc, #352]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800597c:	f3ef 8311 	mrs	r3, BASEPRI
 8005980:	f04f 0120 	mov.w	r1, #32
 8005984:	f381 8811 	msr	BASEPRI, r1
 8005988:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800598a:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	220a      	movs	r2, #10
 8005990:	4952      	ldr	r1, [pc, #328]	; (8005adc <SEGGER_SYSVIEW_Start+0x16c>)
 8005992:	4618      	mov	r0, r3
 8005994:	f7fa fc3c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800599e:	200a      	movs	r0, #10
 80059a0:	f7ff fe2a 	bl	80055f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059a4:	f3ef 8311 	mrs	r3, BASEPRI
 80059a8:	f04f 0120 	mov.w	r1, #32
 80059ac:	f381 8811 	msr	BASEPRI, r1
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	484b      	ldr	r0, [pc, #300]	; (8005ae0 <SEGGER_SYSVIEW_Start+0x170>)
 80059b4:	f7ff fbfb 	bl	80051ae <_PreparePacket>
 80059b8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c2:	4b45      	ldr	r3, [pc, #276]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c8:	e00b      	b.n	80059e2 <SEGGER_SYSVIEW_Start+0x72>
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d8f0      	bhi.n	80059ca <SEGGER_SYSVIEW_Start+0x5a>
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
 80059fc:	4b36      	ldr	r3, [pc, #216]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	e00b      	b.n	8005a1c <SEGGER_SYSVIEW_Start+0xac>
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	09db      	lsrs	r3, r3, #7
 8005a1a:	623b      	str	r3, [r7, #32]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a20:	d8f0      	bhi.n	8005a04 <SEGGER_SYSVIEW_Start+0x94>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	627a      	str	r2, [r7, #36]	; 0x24
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	4b28      	ldr	r3, [pc, #160]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e00b      	b.n	8005a56 <SEGGER_SYSVIEW_Start+0xe6>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	1c59      	adds	r1, r3, #1
 8005a46:	61f9      	str	r1, [r7, #28]
 8005a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5a:	d8f0      	bhi.n	8005a3e <SEGGER_SYSVIEW_Start+0xce>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	61fa      	str	r2, [r7, #28]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e00b      	b.n	8005a8e <SEGGER_SYSVIEW_Start+0x11e>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	6179      	str	r1, [r7, #20]
 8005a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	09db      	lsrs	r3, r3, #7
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b7f      	cmp	r3, #127	; 0x7f
 8005a92:	d8f0      	bhi.n	8005a76 <SEGGER_SYSVIEW_Start+0x106>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	617a      	str	r2, [r7, #20]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005aa4:	2218      	movs	r2, #24
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff fc6b 	bl	8005384 <_SendPacket>
      RECORD_END();
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <SEGGER_SYSVIEW_Start+0x168>)
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005ac2:	f000 f9eb 	bl	8005e9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005ac6:	f000 f9b1 	bl	8005e2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005aca:	f000 fc81 	bl	80063d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005ace:	bf00      	nop
 8005ad0:	3730      	adds	r7, #48	; 0x30
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200142b8 	.word	0x200142b8
 8005adc:	08006fc8 	.word	0x08006fc8
 8005ae0:	200142e8 	.word	0x200142e8

08005ae4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005aea:	f3ef 8311 	mrs	r3, BASEPRI
 8005aee:	f04f 0120 	mov.w	r1, #32
 8005af2:	f381 8811 	msr	BASEPRI, r1
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	480b      	ldr	r0, [pc, #44]	; (8005b28 <SEGGER_SYSVIEW_Stop+0x44>)
 8005afa:	f7ff fb58 	bl	80051ae <_PreparePacket>
 8005afe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <SEGGER_SYSVIEW_Stop+0x48>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b08:	220b      	movs	r2, #11
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6838      	ldr	r0, [r7, #0]
 8005b0e:	f7ff fc39 	bl	8005384 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <SEGGER_SYSVIEW_Stop+0x48>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200142e8 	.word	0x200142e8
 8005b2c:	200142b8 	.word	0x200142b8

08005b30 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08c      	sub	sp, #48	; 0x30
 8005b34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b36:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3a:	f04f 0120 	mov.w	r1, #32
 8005b3e:	f381 8811 	msr	BASEPRI, r1
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	4845      	ldr	r0, [pc, #276]	; (8005c5c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b46:	f7ff fb32 	bl	80051ae <_PreparePacket>
 8005b4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b54:	4b42      	ldr	r3, [pc, #264]	; (8005c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	e00b      	b.n	8005b74 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	09db      	lsrs	r3, r3, #7
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b7f      	cmp	r3, #127	; 0x7f
 8005b78:	d8f0      	bhi.n	8005b5c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	e00b      	b.n	8005bae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	1c59      	adds	r1, r3, #1
 8005b9e:	6279      	str	r1, [r7, #36]	; 0x24
 8005ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	09db      	lsrs	r3, r3, #7
 8005bac:	623b      	str	r3, [r7, #32]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb2:	d8f0      	bhi.n	8005b96 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e00b      	b.n	8005be8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	1c59      	adds	r1, r3, #1
 8005bd8:	61f9      	str	r1, [r7, #28]
 8005bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	09db      	lsrs	r3, r3, #7
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b7f      	cmp	r3, #127	; 0x7f
 8005bec:	d8f0      	bhi.n	8005bd0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	61fa      	str	r2, [r7, #28]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e00b      	b.n	8005c20 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	6179      	str	r1, [r7, #20]
 8005c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b7f      	cmp	r3, #127	; 0x7f
 8005c24:	d8f0      	bhi.n	8005c08 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	617a      	str	r2, [r7, #20]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c36:	2218      	movs	r2, #24
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	68b8      	ldr	r0, [r7, #8]
 8005c3c:	f7ff fba2 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	4798      	blx	r3
  }
}
 8005c54:	bf00      	nop
 8005c56:	3730      	adds	r7, #48	; 0x30
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	200142e8 	.word	0x200142e8
 8005c60:	200142b8 	.word	0x200142b8

08005c64 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b092      	sub	sp, #72	; 0x48
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c70:	f04f 0120 	mov.w	r1, #32
 8005c74:	f381 8811 	msr	BASEPRI, r1
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	486a      	ldr	r0, [pc, #424]	; (8005e24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005c7c:	f7ff fa97 	bl	80051ae <_PreparePacket>
 8005c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b66      	ldr	r3, [pc, #408]	; (8005e28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	643b      	str	r3, [r7, #64]	; 0x40
 8005c96:	e00b      	b.n	8005cb0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	1c59      	adds	r1, r3, #1
 8005ca0:	6479      	str	r1, [r7, #68]	; 0x44
 8005ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cac:	09db      	lsrs	r3, r3, #7
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb4:	d8f0      	bhi.n	8005c98 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	647a      	str	r2, [r7, #68]	; 0x44
 8005cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cd0:	e00b      	b.n	8005cea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	1c59      	adds	r1, r3, #1
 8005cda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	09db      	lsrs	r3, r3, #7
 8005ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	2b7f      	cmp	r3, #127	; 0x7f
 8005cee:	d8f0      	bhi.n	8005cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	4619      	mov	r1, r3
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fa03 	bl	8005114 <_EncodeStr>
 8005d0e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d10:	2209      	movs	r2, #9
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6938      	ldr	r0, [r7, #16]
 8005d16:	f7ff fb35 	bl	8005384 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b40      	ldr	r3, [pc, #256]	; (8005e28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d2e:	e00b      	b.n	8005d48 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	1c59      	adds	r1, r3, #1
 8005d38:	6379      	str	r1, [r7, #52]	; 0x34
 8005d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d4c:	d8f0      	bhi.n	8005d30 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	637a      	str	r2, [r7, #52]	; 0x34
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d68:	e00b      	b.n	8005d82 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	09db      	lsrs	r3, r3, #7
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	2b7f      	cmp	r3, #127	; 0x7f
 8005d86:	d8f0      	bhi.n	8005d6a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	e00b      	b.n	8005dbc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	6279      	str	r1, [r7, #36]	; 0x24
 8005dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	09db      	lsrs	r3, r3, #7
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc0:	d8f0      	bhi.n	8005da4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	627a      	str	r2, [r7, #36]	; 0x24
 8005dc8:	6a3a      	ldr	r2, [r7, #32]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e00b      	b.n	8005df4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	61f9      	str	r1, [r7, #28]
 8005de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b7f      	cmp	r3, #127	; 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	61fa      	str	r2, [r7, #28]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e0a:	2215      	movs	r2, #21
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	6938      	ldr	r0, [r7, #16]
 8005e10:	f7ff fab8 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f383 8811 	msr	BASEPRI, r3
}
 8005e1a:	bf00      	nop
 8005e1c:	3748      	adds	r7, #72	; 0x48
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200142e8 	.word	0x200142e8
 8005e28:	200142b8 	.word	0x200142b8

08005e2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e42:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4798      	blx	r3
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200142b8 	.word	0x200142b8

08005e54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e60:	f04f 0120 	mov.w	r1, #32
 8005e64:	f381 8811 	msr	BASEPRI, r1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	480b      	ldr	r0, [pc, #44]	; (8005e98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005e6c:	f7ff f99f 	bl	80051ae <_PreparePacket>
 8005e70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	6938      	ldr	r0, [r7, #16]
 8005e78:	f7ff f94c 	bl	8005114 <_EncodeStr>
 8005e7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005e7e:	220e      	movs	r2, #14
 8005e80:	68f9      	ldr	r1, [r7, #12]
 8005e82:	6938      	ldr	r0, [r7, #16]
 8005e84:	f7ff fa7e 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f383 8811 	msr	BASEPRI, r3
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200142e8 	.word	0x200142e8

08005e9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005ea2:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d019      	beq.n	8005ede <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005eaa:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d014      	beq.n	8005ede <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4798      	blx	r3
 8005ebc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ec0:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005ec2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f04f 0400 	mov.w	r4, #0
 8005ece:	0013      	movs	r3, r2
 8005ed0:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	200d      	movs	r0, #13
 8005ed8:	f7ff fbe8 	bl	80056ac <SEGGER_SYSVIEW_RecordU32x2>
 8005edc:	e005      	b.n	8005eea <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	200c      	movs	r0, #12
 8005ee6:	f7ff fba5 	bl	8005634 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	200142b8 	.word	0x200142b8
 8005ef8:	e0001004 	.word	0xe0001004

08005efc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f02:	f3ef 8311 	mrs	r3, BASEPRI
 8005f06:	f04f 0120 	mov.w	r1, #32
 8005f0a:	f381 8811 	msr	BASEPRI, r1
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	4819      	ldr	r0, [pc, #100]	; (8005f78 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f12:	f7ff f94c 	bl	80051ae <_PreparePacket>
 8005f16:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	e00b      	b.n	8005f48 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	1c59      	adds	r1, r3, #1
 8005f38:	6179      	str	r1, [r7, #20]
 8005f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	09db      	lsrs	r3, r3, #7
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4c:	d8f0      	bhi.n	8005f30 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	617a      	str	r2, [r7, #20]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f5e:	2202      	movs	r2, #2
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68b8      	ldr	r0, [r7, #8]
 8005f64:	f7ff fa0e 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f383 8811 	msr	BASEPRI, r3
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200142e8 	.word	0x200142e8
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f86:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8a:	f04f 0120 	mov.w	r1, #32
 8005f8e:	f381 8811 	msr	BASEPRI, r1
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	4807      	ldr	r0, [pc, #28]	; (8005fb4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005f96:	f7ff f90a 	bl	80051ae <_PreparePacket>
 8005f9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f7ff f9ef 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f383 8811 	msr	BASEPRI, r3
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	200142e8 	.word	0x200142e8

08005fb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc2:	f04f 0120 	mov.w	r1, #32
 8005fc6:	f381 8811 	msr	BASEPRI, r1
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	4807      	ldr	r0, [pc, #28]	; (8005fec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005fce:	f7ff f8ee 	bl	80051ae <_PreparePacket>
 8005fd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005fd4:	2212      	movs	r2, #18
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6838      	ldr	r0, [r7, #0]
 8005fda:	f7ff f9d3 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200142e8 	.word	0x200142e8

08005ff0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffa:	f04f 0120 	mov.w	r1, #32
 8005ffe:	f381 8811 	msr	BASEPRI, r1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	4807      	ldr	r0, [pc, #28]	; (8006024 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006006:	f7ff f8d2 	bl	80051ae <_PreparePacket>
 800600a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800600c:	2211      	movs	r2, #17
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6838      	ldr	r0, [r7, #0]
 8006012:	f7ff f9b7 	bl	8005384 <_SendPacket>
  RECORD_END();
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f383 8811 	msr	BASEPRI, r3
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	200142e8 	.word	0x200142e8

08006028 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006030:	f3ef 8311 	mrs	r3, BASEPRI
 8006034:	f04f 0120 	mov.w	r1, #32
 8006038:	f381 8811 	msr	BASEPRI, r1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	4819      	ldr	r0, [pc, #100]	; (80060a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006040:	f7ff f8b5 	bl	80051ae <_PreparePacket>
 8006044:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e00b      	b.n	8006076 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	61f9      	str	r1, [r7, #28]
 8006068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b7f      	cmp	r3, #127	; 0x7f
 800607a:	d8f0      	bhi.n	800605e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	61fa      	str	r2, [r7, #28]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800608c:	2208      	movs	r2, #8
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	6938      	ldr	r0, [r7, #16]
 8006092:	f7ff f977 	bl	8005384 <_SendPacket>
  RECORD_END();
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f383 8811 	msr	BASEPRI, r3
}
 800609c:	bf00      	nop
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200142e8 	.word	0x200142e8
 80060a8:	200142b8 	.word	0x200142b8

080060ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060b4:	f3ef 8311 	mrs	r3, BASEPRI
 80060b8:	f04f 0120 	mov.w	r1, #32
 80060bc:	f381 8811 	msr	BASEPRI, r1
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	4819      	ldr	r0, [pc, #100]	; (8006128 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80060c4:	f7ff f873 	bl	80051ae <_PreparePacket>
 80060c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	e00b      	b.n	80060fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	1c59      	adds	r1, r3, #1
 80060ea:	61f9      	str	r1, [r7, #28]
 80060ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	09db      	lsrs	r3, r3, #7
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b7f      	cmp	r3, #127	; 0x7f
 80060fe:	d8f0      	bhi.n	80060e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006110:	2204      	movs	r2, #4
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6938      	ldr	r0, [r7, #16]
 8006116:	f7ff f935 	bl	8005384 <_SendPacket>
  RECORD_END();
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f383 8811 	msr	BASEPRI, r3
}
 8006120:	bf00      	nop
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	200142e8 	.word	0x200142e8
 800612c:	200142b8 	.word	0x200142b8

08006130 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006138:	f3ef 8311 	mrs	r3, BASEPRI
 800613c:	f04f 0120 	mov.w	r1, #32
 8006140:	f381 8811 	msr	BASEPRI, r1
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	4819      	ldr	r0, [pc, #100]	; (80061ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006148:	f7ff f831 	bl	80051ae <_PreparePacket>
 800614c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e00b      	b.n	800617e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	61f9      	str	r1, [r7, #28]
 8006170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b7f      	cmp	r3, #127	; 0x7f
 8006182:	d8f0      	bhi.n	8006166 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	61fa      	str	r2, [r7, #28]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006194:	2206      	movs	r2, #6
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	6938      	ldr	r0, [r7, #16]
 800619a:	f7ff f8f3 	bl	8005384 <_SendPacket>
  RECORD_END();
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f383 8811 	msr	BASEPRI, r3
}
 80061a4:	bf00      	nop
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200142e8 	.word	0x200142e8
 80061b0:	200142b8 	.word	0x200142b8

080061b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061be:	f3ef 8311 	mrs	r3, BASEPRI
 80061c2:	f04f 0120 	mov.w	r1, #32
 80061c6:	f381 8811 	msr	BASEPRI, r1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	4827      	ldr	r0, [pc, #156]	; (800626c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80061ce:	f7fe ffee 	bl	80051ae <_PreparePacket>
 80061d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	623b      	str	r3, [r7, #32]
 80061ea:	e00b      	b.n	8006204 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	6279      	str	r1, [r7, #36]	; 0x24
 80061f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	09db      	lsrs	r3, r3, #7
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	2b7f      	cmp	r3, #127	; 0x7f
 8006208:	d8f0      	bhi.n	80061ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	627a      	str	r2, [r7, #36]	; 0x24
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e00b      	b.n	800623c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1c59      	adds	r1, r3, #1
 800622c:	61f9      	str	r1, [r7, #28]
 800622e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	09db      	lsrs	r3, r3, #7
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b7f      	cmp	r3, #127	; 0x7f
 8006240:	d8f0      	bhi.n	8006224 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	61fa      	str	r2, [r7, #28]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006252:	2207      	movs	r2, #7
 8006254:	68f9      	ldr	r1, [r7, #12]
 8006256:	6938      	ldr	r0, [r7, #16]
 8006258:	f7ff f894 	bl	8005384 <_SendPacket>
  RECORD_END();
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f383 8811 	msr	BASEPRI, r3
}
 8006262:	bf00      	nop
 8006264:	3728      	adds	r7, #40	; 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200142e8 	.word	0x200142e8
 8006270:	200142b8 	.word	0x200142b8

08006274 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	1ad3      	subs	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	200142b8 	.word	0x200142b8

08006294 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b08c      	sub	sp, #48	; 0x30
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800629e:	4b3b      	ldr	r3, [pc, #236]	; (800638c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d06d      	beq.n	8006382 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80062a6:	4b39      	ldr	r3, [pc, #228]	; (800638c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80062ac:	2300      	movs	r3, #0
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b0:	e008      	b.n	80062c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	3301      	adds	r3, #1
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d3f2      	bcc.n	80062b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80062cc:	e000      	b.n	80062d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80062ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d055      	beq.n	8006382 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062d6:	f3ef 8311 	mrs	r3, BASEPRI
 80062da:	f04f 0120 	mov.w	r1, #32
 80062de:	f381 8811 	msr	BASEPRI, r1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	482a      	ldr	r0, [pc, #168]	; (8006390 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80062e6:	f7fe ff62 	bl	80051ae <_PreparePacket>
 80062ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	e00b      	b.n	8006312 <SEGGER_SYSVIEW_SendModule+0x7e>
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	6279      	str	r1, [r7, #36]	; 0x24
 8006304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	09db      	lsrs	r3, r3, #7
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	2b7f      	cmp	r3, #127	; 0x7f
 8006316:	d8f0      	bhi.n	80062fa <SEGGER_SYSVIEW_SendModule+0x66>
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	627a      	str	r2, [r7, #36]	; 0x24
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e00b      	b.n	800634c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	61f9      	str	r1, [r7, #28]
 800633e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	61bb      	str	r3, [r7, #24]
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b7f      	cmp	r3, #127	; 0x7f
 8006350:	d8f0      	bhi.n	8006334 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	61fa      	str	r2, [r7, #28]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	4619      	mov	r1, r3
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7fe fed2 	bl	8005114 <_EncodeStr>
 8006370:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006372:	2216      	movs	r2, #22
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	6938      	ldr	r0, [r7, #16]
 8006378:	f7ff f804 	bl	8005384 <_SendPacket>
      RECORD_END();
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006382:	bf00      	nop
 8006384:	3730      	adds	r7, #48	; 0x30
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200142e0 	.word	0x200142e0
 8006390:	200142e8 	.word	0x200142e8

08006394 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00f      	beq.n	80063c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f2      	bne.n	80063a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200142e0 	.word	0x200142e0

080063d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80063d6:	f3ef 8311 	mrs	r3, BASEPRI
 80063da:	f04f 0120 	mov.w	r1, #32
 80063de:	f381 8811 	msr	BASEPRI, r1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	4817      	ldr	r0, [pc, #92]	; (8006444 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80063e6:	f7fe fee2 	bl	80051ae <_PreparePacket>
 80063ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	e00b      	b.n	8006414 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	6179      	str	r1, [r7, #20]
 8006406:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	09db      	lsrs	r3, r3, #7
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b7f      	cmp	r3, #127	; 0x7f
 8006418:	d8f0      	bhi.n	80063fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	617a      	str	r2, [r7, #20]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800642a:	221b      	movs	r2, #27
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	68b8      	ldr	r0, [r7, #8]
 8006430:	f7fe ffa8 	bl	8005384 <_SendPacket>
  RECORD_END();
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f383 8811 	msr	BASEPRI, r3
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200142e8 	.word	0x200142e8
 8006448:	200142e4 	.word	0x200142e4

0800644c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006454:	f3ef 8311 	mrs	r3, BASEPRI
 8006458:	f04f 0120 	mov.w	r1, #32
 800645c:	f381 8811 	msr	BASEPRI, r1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	4827      	ldr	r0, [pc, #156]	; (8006500 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006464:	f7fe fea3 	bl	80051ae <_PreparePacket>
 8006468:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	6938      	ldr	r0, [r7, #16]
 8006470:	f7fe fe50 	bl	8005114 <_EncodeStr>
 8006474:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
 800647a:	2301      	movs	r3, #1
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	e00b      	b.n	8006498 <SEGGER_SYSVIEW_Warn+0x4c>
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	6279      	str	r1, [r7, #36]	; 0x24
 800648a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	09db      	lsrs	r3, r3, #7
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	2b7f      	cmp	r3, #127	; 0x7f
 800649c:	d8f0      	bhi.n	8006480 <SEGGER_SYSVIEW_Warn+0x34>
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	627a      	str	r2, [r7, #36]	; 0x24
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e00b      	b.n	80064d0 <SEGGER_SYSVIEW_Warn+0x84>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	61f9      	str	r1, [r7, #28]
 80064c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	09db      	lsrs	r3, r3, #7
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b7f      	cmp	r3, #127	; 0x7f
 80064d4:	d8f0      	bhi.n	80064b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	61fa      	str	r2, [r7, #28]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064e6:	221a      	movs	r2, #26
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f7fe ff4a 	bl	8005384 <_SendPacket>
  RECORD_END();
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f383 8811 	msr	BASEPRI, r3
}
 80064f6:	bf00      	nop
 80064f8:	3728      	adds	r7, #40	; 0x28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	200142e8 	.word	0x200142e8

08006504 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	2000      	movs	r0, #0
 8006518:	f7fe fce2 	bl	8004ee0 <SEGGER_RTT_Write>
  return len;
 800651c:	683b      	ldr	r3, [r7, #0]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <__libc_init_array>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4e0d      	ldr	r6, [pc, #52]	; (8006560 <__libc_init_array+0x38>)
 800652c:	4c0d      	ldr	r4, [pc, #52]	; (8006564 <__libc_init_array+0x3c>)
 800652e:	1ba4      	subs	r4, r4, r6
 8006530:	10a4      	asrs	r4, r4, #2
 8006532:	2500      	movs	r5, #0
 8006534:	42a5      	cmp	r5, r4
 8006536:	d109      	bne.n	800654c <__libc_init_array+0x24>
 8006538:	4e0b      	ldr	r6, [pc, #44]	; (8006568 <__libc_init_array+0x40>)
 800653a:	4c0c      	ldr	r4, [pc, #48]	; (800656c <__libc_init_array+0x44>)
 800653c:	f000 fc9e 	bl	8006e7c <_init>
 8006540:	1ba4      	subs	r4, r4, r6
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	2500      	movs	r5, #0
 8006546:	42a5      	cmp	r5, r4
 8006548:	d105      	bne.n	8006556 <__libc_init_array+0x2e>
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006550:	4798      	blx	r3
 8006552:	3501      	adds	r5, #1
 8006554:	e7ee      	b.n	8006534 <__libc_init_array+0xc>
 8006556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800655a:	4798      	blx	r3
 800655c:	3501      	adds	r5, #1
 800655e:	e7f2      	b.n	8006546 <__libc_init_array+0x1e>
 8006560:	08007040 	.word	0x08007040
 8006564:	08007040 	.word	0x08007040
 8006568:	08007040 	.word	0x08007040
 800656c:	08007044 	.word	0x08007044

08006570 <memcmp>:
 8006570:	b530      	push	{r4, r5, lr}
 8006572:	2400      	movs	r4, #0
 8006574:	42a2      	cmp	r2, r4
 8006576:	d101      	bne.n	800657c <memcmp+0xc>
 8006578:	2000      	movs	r0, #0
 800657a:	e007      	b.n	800658c <memcmp+0x1c>
 800657c:	5d03      	ldrb	r3, [r0, r4]
 800657e:	3401      	adds	r4, #1
 8006580:	190d      	adds	r5, r1, r4
 8006582:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006586:	42ab      	cmp	r3, r5
 8006588:	d0f4      	beq.n	8006574 <memcmp+0x4>
 800658a:	1b58      	subs	r0, r3, r5
 800658c:	bd30      	pop	{r4, r5, pc}

0800658e <memcpy>:
 800658e:	b510      	push	{r4, lr}
 8006590:	1e43      	subs	r3, r0, #1
 8006592:	440a      	add	r2, r1
 8006594:	4291      	cmp	r1, r2
 8006596:	d100      	bne.n	800659a <memcpy+0xc>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800659e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a2:	e7f7      	b.n	8006594 <memcpy+0x6>

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <_puts_r>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	460e      	mov	r6, r1
 80065b8:	4605      	mov	r5, r0
 80065ba:	b118      	cbz	r0, 80065c4 <_puts_r+0x10>
 80065bc:	6983      	ldr	r3, [r0, #24]
 80065be:	b90b      	cbnz	r3, 80065c4 <_puts_r+0x10>
 80065c0:	f000 fa0c 	bl	80069dc <__sinit>
 80065c4:	69ab      	ldr	r3, [r5, #24]
 80065c6:	68ac      	ldr	r4, [r5, #8]
 80065c8:	b913      	cbnz	r3, 80065d0 <_puts_r+0x1c>
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 fa06 	bl	80069dc <__sinit>
 80065d0:	4b23      	ldr	r3, [pc, #140]	; (8006660 <_puts_r+0xac>)
 80065d2:	429c      	cmp	r4, r3
 80065d4:	d117      	bne.n	8006606 <_puts_r+0x52>
 80065d6:	686c      	ldr	r4, [r5, #4]
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	071b      	lsls	r3, r3, #28
 80065dc:	d51d      	bpl.n	800661a <_puts_r+0x66>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	b1db      	cbz	r3, 800661a <_puts_r+0x66>
 80065e2:	3e01      	subs	r6, #1
 80065e4:	68a3      	ldr	r3, [r4, #8]
 80065e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	b9e9      	cbnz	r1, 800662c <_puts_r+0x78>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da2e      	bge.n	8006652 <_puts_r+0x9e>
 80065f4:	4622      	mov	r2, r4
 80065f6:	210a      	movs	r1, #10
 80065f8:	4628      	mov	r0, r5
 80065fa:	f000 f83f 	bl	800667c <__swbuf_r>
 80065fe:	3001      	adds	r0, #1
 8006600:	d011      	beq.n	8006626 <_puts_r+0x72>
 8006602:	200a      	movs	r0, #10
 8006604:	e011      	b.n	800662a <_puts_r+0x76>
 8006606:	4b17      	ldr	r3, [pc, #92]	; (8006664 <_puts_r+0xb0>)
 8006608:	429c      	cmp	r4, r3
 800660a:	d101      	bne.n	8006610 <_puts_r+0x5c>
 800660c:	68ac      	ldr	r4, [r5, #8]
 800660e:	e7e3      	b.n	80065d8 <_puts_r+0x24>
 8006610:	4b15      	ldr	r3, [pc, #84]	; (8006668 <_puts_r+0xb4>)
 8006612:	429c      	cmp	r4, r3
 8006614:	bf08      	it	eq
 8006616:	68ec      	ldreq	r4, [r5, #12]
 8006618:	e7de      	b.n	80065d8 <_puts_r+0x24>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f87f 	bl	8006720 <__swsetup_r>
 8006622:	2800      	cmp	r0, #0
 8006624:	d0dd      	beq.n	80065e2 <_puts_r+0x2e>
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	2b00      	cmp	r3, #0
 800662e:	da04      	bge.n	800663a <_puts_r+0x86>
 8006630:	69a2      	ldr	r2, [r4, #24]
 8006632:	429a      	cmp	r2, r3
 8006634:	dc06      	bgt.n	8006644 <_puts_r+0x90>
 8006636:	290a      	cmp	r1, #10
 8006638:	d004      	beq.n	8006644 <_puts_r+0x90>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	6022      	str	r2, [r4, #0]
 8006640:	7019      	strb	r1, [r3, #0]
 8006642:	e7cf      	b.n	80065e4 <_puts_r+0x30>
 8006644:	4622      	mov	r2, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f818 	bl	800667c <__swbuf_r>
 800664c:	3001      	adds	r0, #1
 800664e:	d1c9      	bne.n	80065e4 <_puts_r+0x30>
 8006650:	e7e9      	b.n	8006626 <_puts_r+0x72>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	200a      	movs	r0, #10
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	7018      	strb	r0, [r3, #0]
 800665c:	e7e5      	b.n	800662a <_puts_r+0x76>
 800665e:	bf00      	nop
 8006660:	08006ff8 	.word	0x08006ff8
 8006664:	08007018 	.word	0x08007018
 8006668:	08006fd8 	.word	0x08006fd8

0800666c <puts>:
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <puts+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f7ff bf9f 	b.w	80065b4 <_puts_r>
 8006676:	bf00      	nop
 8006678:	20000014 	.word	0x20000014

0800667c <__swbuf_r>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	460e      	mov	r6, r1
 8006680:	4614      	mov	r4, r2
 8006682:	4605      	mov	r5, r0
 8006684:	b118      	cbz	r0, 800668e <__swbuf_r+0x12>
 8006686:	6983      	ldr	r3, [r0, #24]
 8006688:	b90b      	cbnz	r3, 800668e <__swbuf_r+0x12>
 800668a:	f000 f9a7 	bl	80069dc <__sinit>
 800668e:	4b21      	ldr	r3, [pc, #132]	; (8006714 <__swbuf_r+0x98>)
 8006690:	429c      	cmp	r4, r3
 8006692:	d12a      	bne.n	80066ea <__swbuf_r+0x6e>
 8006694:	686c      	ldr	r4, [r5, #4]
 8006696:	69a3      	ldr	r3, [r4, #24]
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	071a      	lsls	r2, r3, #28
 800669e:	d52e      	bpl.n	80066fe <__swbuf_r+0x82>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	b363      	cbz	r3, 80066fe <__swbuf_r+0x82>
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	1ac0      	subs	r0, r0, r3
 80066aa:	6963      	ldr	r3, [r4, #20]
 80066ac:	b2f6      	uxtb	r6, r6
 80066ae:	4283      	cmp	r3, r0
 80066b0:	4637      	mov	r7, r6
 80066b2:	dc04      	bgt.n	80066be <__swbuf_r+0x42>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f926 	bl	8006908 <_fflush_r>
 80066bc:	bb28      	cbnz	r0, 800670a <__swbuf_r+0x8e>
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	60a3      	str	r3, [r4, #8]
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	6022      	str	r2, [r4, #0]
 80066ca:	701e      	strb	r6, [r3, #0]
 80066cc:	6963      	ldr	r3, [r4, #20]
 80066ce:	3001      	adds	r0, #1
 80066d0:	4283      	cmp	r3, r0
 80066d2:	d004      	beq.n	80066de <__swbuf_r+0x62>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	07db      	lsls	r3, r3, #31
 80066d8:	d519      	bpl.n	800670e <__swbuf_r+0x92>
 80066da:	2e0a      	cmp	r6, #10
 80066dc:	d117      	bne.n	800670e <__swbuf_r+0x92>
 80066de:	4621      	mov	r1, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f911 	bl	8006908 <_fflush_r>
 80066e6:	b190      	cbz	r0, 800670e <__swbuf_r+0x92>
 80066e8:	e00f      	b.n	800670a <__swbuf_r+0x8e>
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <__swbuf_r+0x9c>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d101      	bne.n	80066f4 <__swbuf_r+0x78>
 80066f0:	68ac      	ldr	r4, [r5, #8]
 80066f2:	e7d0      	b.n	8006696 <__swbuf_r+0x1a>
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <__swbuf_r+0xa0>)
 80066f6:	429c      	cmp	r4, r3
 80066f8:	bf08      	it	eq
 80066fa:	68ec      	ldreq	r4, [r5, #12]
 80066fc:	e7cb      	b.n	8006696 <__swbuf_r+0x1a>
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	f000 f80d 	bl	8006720 <__swsetup_r>
 8006706:	2800      	cmp	r0, #0
 8006708:	d0cc      	beq.n	80066a4 <__swbuf_r+0x28>
 800670a:	f04f 37ff 	mov.w	r7, #4294967295
 800670e:	4638      	mov	r0, r7
 8006710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006712:	bf00      	nop
 8006714:	08006ff8 	.word	0x08006ff8
 8006718:	08007018 	.word	0x08007018
 800671c:	08006fd8 	.word	0x08006fd8

08006720 <__swsetup_r>:
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <__swsetup_r+0xcc>)
 8006722:	b570      	push	{r4, r5, r6, lr}
 8006724:	681d      	ldr	r5, [r3, #0]
 8006726:	4606      	mov	r6, r0
 8006728:	460c      	mov	r4, r1
 800672a:	b125      	cbz	r5, 8006736 <__swsetup_r+0x16>
 800672c:	69ab      	ldr	r3, [r5, #24]
 800672e:	b913      	cbnz	r3, 8006736 <__swsetup_r+0x16>
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f953 	bl	80069dc <__sinit>
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <__swsetup_r+0xd0>)
 8006738:	429c      	cmp	r4, r3
 800673a:	d10f      	bne.n	800675c <__swsetup_r+0x3c>
 800673c:	686c      	ldr	r4, [r5, #4]
 800673e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006742:	b29a      	uxth	r2, r3
 8006744:	0715      	lsls	r5, r2, #28
 8006746:	d42c      	bmi.n	80067a2 <__swsetup_r+0x82>
 8006748:	06d0      	lsls	r0, r2, #27
 800674a:	d411      	bmi.n	8006770 <__swsetup_r+0x50>
 800674c:	2209      	movs	r2, #9
 800674e:	6032      	str	r2, [r6, #0]
 8006750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	f04f 30ff 	mov.w	r0, #4294967295
 800675a:	e03e      	b.n	80067da <__swsetup_r+0xba>
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <__swsetup_r+0xd4>)
 800675e:	429c      	cmp	r4, r3
 8006760:	d101      	bne.n	8006766 <__swsetup_r+0x46>
 8006762:	68ac      	ldr	r4, [r5, #8]
 8006764:	e7eb      	b.n	800673e <__swsetup_r+0x1e>
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <__swsetup_r+0xd8>)
 8006768:	429c      	cmp	r4, r3
 800676a:	bf08      	it	eq
 800676c:	68ec      	ldreq	r4, [r5, #12]
 800676e:	e7e6      	b.n	800673e <__swsetup_r+0x1e>
 8006770:	0751      	lsls	r1, r2, #29
 8006772:	d512      	bpl.n	800679a <__swsetup_r+0x7a>
 8006774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006776:	b141      	cbz	r1, 800678a <__swsetup_r+0x6a>
 8006778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800677c:	4299      	cmp	r1, r3
 800677e:	d002      	beq.n	8006786 <__swsetup_r+0x66>
 8006780:	4630      	mov	r0, r6
 8006782:	f000 fa19 	bl	8006bb8 <_free_r>
 8006786:	2300      	movs	r3, #0
 8006788:	6363      	str	r3, [r4, #52]	; 0x34
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006790:	81a3      	strh	r3, [r4, #12]
 8006792:	2300      	movs	r3, #0
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f043 0308 	orr.w	r3, r3, #8
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	b94b      	cbnz	r3, 80067ba <__swsetup_r+0x9a>
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b0:	d003      	beq.n	80067ba <__swsetup_r+0x9a>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 f9bf 	bl	8006b38 <__smakebuf_r>
 80067ba:	89a2      	ldrh	r2, [r4, #12]
 80067bc:	f012 0301 	ands.w	r3, r2, #1
 80067c0:	d00c      	beq.n	80067dc <__swsetup_r+0xbc>
 80067c2:	2300      	movs	r3, #0
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	6963      	ldr	r3, [r4, #20]
 80067c8:	425b      	negs	r3, r3
 80067ca:	61a3      	str	r3, [r4, #24]
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	b953      	cbnz	r3, 80067e6 <__swsetup_r+0xc6>
 80067d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80067d8:	d1ba      	bne.n	8006750 <__swsetup_r+0x30>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	0792      	lsls	r2, r2, #30
 80067de:	bf58      	it	pl
 80067e0:	6963      	ldrpl	r3, [r4, #20]
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	e7f2      	b.n	80067cc <__swsetup_r+0xac>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e7f7      	b.n	80067da <__swsetup_r+0xba>
 80067ea:	bf00      	nop
 80067ec:	20000014 	.word	0x20000014
 80067f0:	08006ff8 	.word	0x08006ff8
 80067f4:	08007018 	.word	0x08007018
 80067f8:	08006fd8 	.word	0x08006fd8

080067fc <__sflush_r>:
 80067fc:	898a      	ldrh	r2, [r1, #12]
 80067fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	4605      	mov	r5, r0
 8006804:	0710      	lsls	r0, r2, #28
 8006806:	460c      	mov	r4, r1
 8006808:	d458      	bmi.n	80068bc <__sflush_r+0xc0>
 800680a:	684b      	ldr	r3, [r1, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc05      	bgt.n	800681c <__sflush_r+0x20>
 8006810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	dc02      	bgt.n	800681c <__sflush_r+0x20>
 8006816:	2000      	movs	r0, #0
 8006818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800681e:	2e00      	cmp	r6, #0
 8006820:	d0f9      	beq.n	8006816 <__sflush_r+0x1a>
 8006822:	2300      	movs	r3, #0
 8006824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006828:	682f      	ldr	r7, [r5, #0]
 800682a:	6a21      	ldr	r1, [r4, #32]
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	d032      	beq.n	8006896 <__sflush_r+0x9a>
 8006830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	075a      	lsls	r2, r3, #29
 8006836:	d505      	bpl.n	8006844 <__sflush_r+0x48>
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	1ac0      	subs	r0, r0, r3
 800683c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800683e:	b10b      	cbz	r3, 8006844 <__sflush_r+0x48>
 8006840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006842:	1ac0      	subs	r0, r0, r3
 8006844:	2300      	movs	r3, #0
 8006846:	4602      	mov	r2, r0
 8006848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800684a:	6a21      	ldr	r1, [r4, #32]
 800684c:	4628      	mov	r0, r5
 800684e:	47b0      	blx	r6
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	d106      	bne.n	8006864 <__sflush_r+0x68>
 8006856:	6829      	ldr	r1, [r5, #0]
 8006858:	291d      	cmp	r1, #29
 800685a:	d848      	bhi.n	80068ee <__sflush_r+0xf2>
 800685c:	4a29      	ldr	r2, [pc, #164]	; (8006904 <__sflush_r+0x108>)
 800685e:	40ca      	lsrs	r2, r1
 8006860:	07d6      	lsls	r6, r2, #31
 8006862:	d544      	bpl.n	80068ee <__sflush_r+0xf2>
 8006864:	2200      	movs	r2, #0
 8006866:	6062      	str	r2, [r4, #4]
 8006868:	04d9      	lsls	r1, r3, #19
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	d504      	bpl.n	800687a <__sflush_r+0x7e>
 8006870:	1c42      	adds	r2, r0, #1
 8006872:	d101      	bne.n	8006878 <__sflush_r+0x7c>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b903      	cbnz	r3, 800687a <__sflush_r+0x7e>
 8006878:	6560      	str	r0, [r4, #84]	; 0x54
 800687a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687c:	602f      	str	r7, [r5, #0]
 800687e:	2900      	cmp	r1, #0
 8006880:	d0c9      	beq.n	8006816 <__sflush_r+0x1a>
 8006882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006886:	4299      	cmp	r1, r3
 8006888:	d002      	beq.n	8006890 <__sflush_r+0x94>
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f994 	bl	8006bb8 <_free_r>
 8006890:	2000      	movs	r0, #0
 8006892:	6360      	str	r0, [r4, #52]	; 0x34
 8006894:	e7c0      	b.n	8006818 <__sflush_r+0x1c>
 8006896:	2301      	movs	r3, #1
 8006898:	4628      	mov	r0, r5
 800689a:	47b0      	blx	r6
 800689c:	1c41      	adds	r1, r0, #1
 800689e:	d1c8      	bne.n	8006832 <__sflush_r+0x36>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0c5      	beq.n	8006832 <__sflush_r+0x36>
 80068a6:	2b1d      	cmp	r3, #29
 80068a8:	d001      	beq.n	80068ae <__sflush_r+0xb2>
 80068aa:	2b16      	cmp	r3, #22
 80068ac:	d101      	bne.n	80068b2 <__sflush_r+0xb6>
 80068ae:	602f      	str	r7, [r5, #0]
 80068b0:	e7b1      	b.n	8006816 <__sflush_r+0x1a>
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b8:	81a3      	strh	r3, [r4, #12]
 80068ba:	e7ad      	b.n	8006818 <__sflush_r+0x1c>
 80068bc:	690f      	ldr	r7, [r1, #16]
 80068be:	2f00      	cmp	r7, #0
 80068c0:	d0a9      	beq.n	8006816 <__sflush_r+0x1a>
 80068c2:	0793      	lsls	r3, r2, #30
 80068c4:	680e      	ldr	r6, [r1, #0]
 80068c6:	bf08      	it	eq
 80068c8:	694b      	ldreq	r3, [r1, #20]
 80068ca:	600f      	str	r7, [r1, #0]
 80068cc:	bf18      	it	ne
 80068ce:	2300      	movne	r3, #0
 80068d0:	eba6 0807 	sub.w	r8, r6, r7
 80068d4:	608b      	str	r3, [r1, #8]
 80068d6:	f1b8 0f00 	cmp.w	r8, #0
 80068da:	dd9c      	ble.n	8006816 <__sflush_r+0x1a>
 80068dc:	4643      	mov	r3, r8
 80068de:	463a      	mov	r2, r7
 80068e0:	6a21      	ldr	r1, [r4, #32]
 80068e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b0      	blx	r6
 80068e8:	2800      	cmp	r0, #0
 80068ea:	dc06      	bgt.n	80068fa <__sflush_r+0xfe>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	e78e      	b.n	8006818 <__sflush_r+0x1c>
 80068fa:	4407      	add	r7, r0
 80068fc:	eba8 0800 	sub.w	r8, r8, r0
 8006900:	e7e9      	b.n	80068d6 <__sflush_r+0xda>
 8006902:	bf00      	nop
 8006904:	20400001 	.word	0x20400001

08006908 <_fflush_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	4605      	mov	r5, r0
 800690e:	460c      	mov	r4, r1
 8006910:	b1db      	cbz	r3, 800694a <_fflush_r+0x42>
 8006912:	b118      	cbz	r0, 800691c <_fflush_r+0x14>
 8006914:	6983      	ldr	r3, [r0, #24]
 8006916:	b90b      	cbnz	r3, 800691c <_fflush_r+0x14>
 8006918:	f000 f860 	bl	80069dc <__sinit>
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <_fflush_r+0x48>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d109      	bne.n	8006936 <_fflush_r+0x2e>
 8006922:	686c      	ldr	r4, [r5, #4]
 8006924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006928:	b17b      	cbz	r3, 800694a <_fflush_r+0x42>
 800692a:	4621      	mov	r1, r4
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006932:	f7ff bf63 	b.w	80067fc <__sflush_r>
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <_fflush_r+0x4c>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d101      	bne.n	8006940 <_fflush_r+0x38>
 800693c:	68ac      	ldr	r4, [r5, #8]
 800693e:	e7f1      	b.n	8006924 <_fflush_r+0x1c>
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <_fflush_r+0x50>)
 8006942:	429c      	cmp	r4, r3
 8006944:	bf08      	it	eq
 8006946:	68ec      	ldreq	r4, [r5, #12]
 8006948:	e7ec      	b.n	8006924 <_fflush_r+0x1c>
 800694a:	2000      	movs	r0, #0
 800694c:	bd38      	pop	{r3, r4, r5, pc}
 800694e:	bf00      	nop
 8006950:	08006ff8 	.word	0x08006ff8
 8006954:	08007018 	.word	0x08007018
 8006958:	08006fd8 	.word	0x08006fd8

0800695c <std>:
 800695c:	2300      	movs	r3, #0
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	e9c0 3300 	strd	r3, r3, [r0]
 8006966:	6083      	str	r3, [r0, #8]
 8006968:	8181      	strh	r1, [r0, #12]
 800696a:	6643      	str	r3, [r0, #100]	; 0x64
 800696c:	81c2      	strh	r2, [r0, #14]
 800696e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006972:	6183      	str	r3, [r0, #24]
 8006974:	4619      	mov	r1, r3
 8006976:	2208      	movs	r2, #8
 8006978:	305c      	adds	r0, #92	; 0x5c
 800697a:	f7ff fe13 	bl	80065a4 <memset>
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <std+0x38>)
 8006980:	6263      	str	r3, [r4, #36]	; 0x24
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <std+0x3c>)
 8006984:	62a3      	str	r3, [r4, #40]	; 0x28
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <std+0x40>)
 8006988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <std+0x44>)
 800698c:	6224      	str	r4, [r4, #32]
 800698e:	6323      	str	r3, [r4, #48]	; 0x30
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	08006d29 	.word	0x08006d29
 8006998:	08006d4b 	.word	0x08006d4b
 800699c:	08006d83 	.word	0x08006d83
 80069a0:	08006da7 	.word	0x08006da7

080069a4 <_cleanup_r>:
 80069a4:	4901      	ldr	r1, [pc, #4]	; (80069ac <_cleanup_r+0x8>)
 80069a6:	f000 b885 	b.w	8006ab4 <_fwalk_reent>
 80069aa:	bf00      	nop
 80069ac:	08006909 	.word	0x08006909

080069b0 <__sfmoreglue>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	1e4a      	subs	r2, r1, #1
 80069b4:	2568      	movs	r5, #104	; 0x68
 80069b6:	4355      	muls	r5, r2
 80069b8:	460e      	mov	r6, r1
 80069ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069be:	f000 f949 	bl	8006c54 <_malloc_r>
 80069c2:	4604      	mov	r4, r0
 80069c4:	b140      	cbz	r0, 80069d8 <__sfmoreglue+0x28>
 80069c6:	2100      	movs	r1, #0
 80069c8:	e9c0 1600 	strd	r1, r6, [r0]
 80069cc:	300c      	adds	r0, #12
 80069ce:	60a0      	str	r0, [r4, #8]
 80069d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069d4:	f7ff fde6 	bl	80065a4 <memset>
 80069d8:	4620      	mov	r0, r4
 80069da:	bd70      	pop	{r4, r5, r6, pc}

080069dc <__sinit>:
 80069dc:	6983      	ldr	r3, [r0, #24]
 80069de:	b510      	push	{r4, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	bb33      	cbnz	r3, 8006a32 <__sinit+0x56>
 80069e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80069e8:	6503      	str	r3, [r0, #80]	; 0x50
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <__sinit+0x58>)
 80069ec:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <__sinit+0x5c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6282      	str	r2, [r0, #40]	; 0x28
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bf04      	itt	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	6183      	streq	r3, [r0, #24]
 80069fa:	f000 f81f 	bl	8006a3c <__sfp>
 80069fe:	6060      	str	r0, [r4, #4]
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 f81b 	bl	8006a3c <__sfp>
 8006a06:	60a0      	str	r0, [r4, #8]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 f817 	bl	8006a3c <__sfp>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	60e0      	str	r0, [r4, #12]
 8006a12:	2104      	movs	r1, #4
 8006a14:	6860      	ldr	r0, [r4, #4]
 8006a16:	f7ff ffa1 	bl	800695c <std>
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	2109      	movs	r1, #9
 8006a1e:	68a0      	ldr	r0, [r4, #8]
 8006a20:	f7ff ff9c 	bl	800695c <std>
 8006a24:	2202      	movs	r2, #2
 8006a26:	2112      	movs	r1, #18
 8006a28:	68e0      	ldr	r0, [r4, #12]
 8006a2a:	f7ff ff97 	bl	800695c <std>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	61a3      	str	r3, [r4, #24]
 8006a32:	bd10      	pop	{r4, pc}
 8006a34:	08006fd4 	.word	0x08006fd4
 8006a38:	080069a5 	.word	0x080069a5

08006a3c <__sfp>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <__sfp+0x70>)
 8006a40:	681e      	ldr	r6, [r3, #0]
 8006a42:	69b3      	ldr	r3, [r6, #24]
 8006a44:	4607      	mov	r7, r0
 8006a46:	b913      	cbnz	r3, 8006a4e <__sfp+0x12>
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f7ff ffc7 	bl	80069dc <__sinit>
 8006a4e:	3648      	adds	r6, #72	; 0x48
 8006a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	d503      	bpl.n	8006a60 <__sfp+0x24>
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	b133      	cbz	r3, 8006a6a <__sfp+0x2e>
 8006a5c:	6836      	ldr	r6, [r6, #0]
 8006a5e:	e7f7      	b.n	8006a50 <__sfp+0x14>
 8006a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a64:	b16d      	cbz	r5, 8006a82 <__sfp+0x46>
 8006a66:	3468      	adds	r4, #104	; 0x68
 8006a68:	e7f4      	b.n	8006a54 <__sfp+0x18>
 8006a6a:	2104      	movs	r1, #4
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f7ff ff9f 	bl	80069b0 <__sfmoreglue>
 8006a72:	6030      	str	r0, [r6, #0]
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1f1      	bne.n	8006a5c <__sfp+0x20>
 8006a78:	230c      	movs	r3, #12
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <__sfp+0x74>)
 8006a84:	6665      	str	r5, [r4, #100]	; 0x64
 8006a86:	e9c4 5500 	strd	r5, r5, [r4]
 8006a8a:	60a5      	str	r5, [r4, #8]
 8006a8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006a90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006a94:	2208      	movs	r2, #8
 8006a96:	4629      	mov	r1, r5
 8006a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a9c:	f7ff fd82 	bl	80065a4 <memset>
 8006aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006aa8:	e7e9      	b.n	8006a7e <__sfp+0x42>
 8006aaa:	bf00      	nop
 8006aac:	08006fd4 	.word	0x08006fd4
 8006ab0:	ffff0001 	.word	0xffff0001

08006ab4 <_fwalk_reent>:
 8006ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	b914      	cbnz	r4, 8006aca <_fwalk_reent+0x16>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006ace:	3f01      	subs	r7, #1
 8006ad0:	d501      	bpl.n	8006ad6 <_fwalk_reent+0x22>
 8006ad2:	6824      	ldr	r4, [r4, #0]
 8006ad4:	e7f5      	b.n	8006ac2 <_fwalk_reent+0xe>
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d907      	bls.n	8006aec <_fwalk_reent+0x38>
 8006adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	d003      	beq.n	8006aec <_fwalk_reent+0x38>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	47c8      	blx	r9
 8006aea:	4306      	orrs	r6, r0
 8006aec:	3568      	adds	r5, #104	; 0x68
 8006aee:	e7ee      	b.n	8006ace <_fwalk_reent+0x1a>

08006af0 <__swhatbuf_r>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	460e      	mov	r6, r1
 8006af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af8:	2900      	cmp	r1, #0
 8006afa:	b096      	sub	sp, #88	; 0x58
 8006afc:	4614      	mov	r4, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	da07      	bge.n	8006b12 <__swhatbuf_r+0x22>
 8006b02:	2300      	movs	r3, #0
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	89b3      	ldrh	r3, [r6, #12]
 8006b08:	061a      	lsls	r2, r3, #24
 8006b0a:	d410      	bmi.n	8006b2e <__swhatbuf_r+0x3e>
 8006b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b10:	e00e      	b.n	8006b30 <__swhatbuf_r+0x40>
 8006b12:	466a      	mov	r2, sp
 8006b14:	f000 f95c 	bl	8006dd0 <_fstat_r>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	dbf2      	blt.n	8006b02 <__swhatbuf_r+0x12>
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b26:	425a      	negs	r2, r3
 8006b28:	415a      	adcs	r2, r3
 8006b2a:	602a      	str	r2, [r5, #0]
 8006b2c:	e7ee      	b.n	8006b0c <__swhatbuf_r+0x1c>
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2000      	movs	r0, #0
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	b016      	add	sp, #88	; 0x58
 8006b36:	bd70      	pop	{r4, r5, r6, pc}

08006b38 <__smakebuf_r>:
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b3c:	079d      	lsls	r5, r3, #30
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	d507      	bpl.n	8006b54 <__smakebuf_r+0x1c>
 8006b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	6163      	str	r3, [r4, #20]
 8006b50:	b002      	add	sp, #8
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	ab01      	add	r3, sp, #4
 8006b56:	466a      	mov	r2, sp
 8006b58:	f7ff ffca 	bl	8006af0 <__swhatbuf_r>
 8006b5c:	9900      	ldr	r1, [sp, #0]
 8006b5e:	4605      	mov	r5, r0
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 f877 	bl	8006c54 <_malloc_r>
 8006b66:	b948      	cbnz	r0, 8006b7c <__smakebuf_r+0x44>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	059a      	lsls	r2, r3, #22
 8006b6e:	d4ef      	bmi.n	8006b50 <__smakebuf_r+0x18>
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e7e3      	b.n	8006b44 <__smakebuf_r+0xc>
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <__smakebuf_r+0x7c>)
 8006b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	6020      	str	r0, [r4, #0]
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	6163      	str	r3, [r4, #20]
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	6120      	str	r0, [r4, #16]
 8006b92:	b15b      	cbz	r3, 8006bac <__smakebuf_r+0x74>
 8006b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f000 f92b 	bl	8006df4 <_isatty_r>
 8006b9e:	b128      	cbz	r0, 8006bac <__smakebuf_r+0x74>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	431d      	orrs	r5, r3
 8006bb0:	81a5      	strh	r5, [r4, #12]
 8006bb2:	e7cd      	b.n	8006b50 <__smakebuf_r+0x18>
 8006bb4:	080069a5 	.word	0x080069a5

08006bb8 <_free_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d045      	beq.n	8006c4c <_free_r+0x94>
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f0c      	subs	r4, r1, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	18e4      	addlt	r4, r4, r3
 8006bcc:	f000 f934 	bl	8006e38 <__malloc_lock>
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <_free_r+0x98>)
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	b933      	cbnz	r3, 8006be6 <_free_r+0x2e>
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6014      	str	r4, [r2, #0]
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be2:	f000 b92a 	b.w	8006e3a <__malloc_unlock>
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	d90c      	bls.n	8006c04 <_free_r+0x4c>
 8006bea:	6821      	ldr	r1, [r4, #0]
 8006bec:	1862      	adds	r2, r4, r1
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bf04      	itt	eq
 8006bf2:	681a      	ldreq	r2, [r3, #0]
 8006bf4:	685b      	ldreq	r3, [r3, #4]
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	bf04      	itt	eq
 8006bfa:	1852      	addeq	r2, r2, r1
 8006bfc:	6022      	streq	r2, [r4, #0]
 8006bfe:	6004      	str	r4, [r0, #0]
 8006c00:	e7ec      	b.n	8006bdc <_free_r+0x24>
 8006c02:	4613      	mov	r3, r2
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	b10a      	cbz	r2, 8006c0c <_free_r+0x54>
 8006c08:	42a2      	cmp	r2, r4
 8006c0a:	d9fa      	bls.n	8006c02 <_free_r+0x4a>
 8006c0c:	6819      	ldr	r1, [r3, #0]
 8006c0e:	1858      	adds	r0, r3, r1
 8006c10:	42a0      	cmp	r0, r4
 8006c12:	d10b      	bne.n	8006c2c <_free_r+0x74>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	4401      	add	r1, r0
 8006c18:	1858      	adds	r0, r3, r1
 8006c1a:	4282      	cmp	r2, r0
 8006c1c:	6019      	str	r1, [r3, #0]
 8006c1e:	d1dd      	bne.n	8006bdc <_free_r+0x24>
 8006c20:	6810      	ldr	r0, [r2, #0]
 8006c22:	6852      	ldr	r2, [r2, #4]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	4401      	add	r1, r0
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	e7d7      	b.n	8006bdc <_free_r+0x24>
 8006c2c:	d902      	bls.n	8006c34 <_free_r+0x7c>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	e7d3      	b.n	8006bdc <_free_r+0x24>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	1821      	adds	r1, r4, r0
 8006c38:	428a      	cmp	r2, r1
 8006c3a:	bf04      	itt	eq
 8006c3c:	6811      	ldreq	r1, [r2, #0]
 8006c3e:	6852      	ldreq	r2, [r2, #4]
 8006c40:	6062      	str	r2, [r4, #4]
 8006c42:	bf04      	itt	eq
 8006c44:	1809      	addeq	r1, r1, r0
 8006c46:	6021      	streq	r1, [r4, #0]
 8006c48:	605c      	str	r4, [r3, #4]
 8006c4a:	e7c7      	b.n	8006bdc <_free_r+0x24>
 8006c4c:	bd38      	pop	{r3, r4, r5, pc}
 8006c4e:	bf00      	nop
 8006c50:	200143cc 	.word	0x200143cc

08006c54 <_malloc_r>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	1ccd      	adds	r5, r1, #3
 8006c58:	f025 0503 	bic.w	r5, r5, #3
 8006c5c:	3508      	adds	r5, #8
 8006c5e:	2d0c      	cmp	r5, #12
 8006c60:	bf38      	it	cc
 8006c62:	250c      	movcc	r5, #12
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	4606      	mov	r6, r0
 8006c68:	db01      	blt.n	8006c6e <_malloc_r+0x1a>
 8006c6a:	42a9      	cmp	r1, r5
 8006c6c:	d903      	bls.n	8006c76 <_malloc_r+0x22>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	2000      	movs	r0, #0
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
 8006c76:	f000 f8df 	bl	8006e38 <__malloc_lock>
 8006c7a:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <_malloc_r+0xac>)
 8006c7c:	6814      	ldr	r4, [r2, #0]
 8006c7e:	4621      	mov	r1, r4
 8006c80:	b991      	cbnz	r1, 8006ca8 <_malloc_r+0x54>
 8006c82:	4c20      	ldr	r4, [pc, #128]	; (8006d04 <_malloc_r+0xb0>)
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	b91b      	cbnz	r3, 8006c90 <_malloc_r+0x3c>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f83d 	bl	8006d08 <_sbrk_r>
 8006c8e:	6020      	str	r0, [r4, #0]
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 f838 	bl	8006d08 <_sbrk_r>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d124      	bne.n	8006ce6 <_malloc_r+0x92>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	6033      	str	r3, [r6, #0]
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 f8ca 	bl	8006e3a <__malloc_unlock>
 8006ca6:	e7e4      	b.n	8006c72 <_malloc_r+0x1e>
 8006ca8:	680b      	ldr	r3, [r1, #0]
 8006caa:	1b5b      	subs	r3, r3, r5
 8006cac:	d418      	bmi.n	8006ce0 <_malloc_r+0x8c>
 8006cae:	2b0b      	cmp	r3, #11
 8006cb0:	d90f      	bls.n	8006cd2 <_malloc_r+0x7e>
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	50cd      	str	r5, [r1, r3]
 8006cb6:	18cc      	adds	r4, r1, r3
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f8be 	bl	8006e3a <__malloc_unlock>
 8006cbe:	f104 000b 	add.w	r0, r4, #11
 8006cc2:	1d23      	adds	r3, r4, #4
 8006cc4:	f020 0007 	bic.w	r0, r0, #7
 8006cc8:	1ac3      	subs	r3, r0, r3
 8006cca:	d0d3      	beq.n	8006c74 <_malloc_r+0x20>
 8006ccc:	425a      	negs	r2, r3
 8006cce:	50e2      	str	r2, [r4, r3]
 8006cd0:	e7d0      	b.n	8006c74 <_malloc_r+0x20>
 8006cd2:	428c      	cmp	r4, r1
 8006cd4:	684b      	ldr	r3, [r1, #4]
 8006cd6:	bf16      	itet	ne
 8006cd8:	6063      	strne	r3, [r4, #4]
 8006cda:	6013      	streq	r3, [r2, #0]
 8006cdc:	460c      	movne	r4, r1
 8006cde:	e7eb      	b.n	8006cb8 <_malloc_r+0x64>
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	6849      	ldr	r1, [r1, #4]
 8006ce4:	e7cc      	b.n	8006c80 <_malloc_r+0x2c>
 8006ce6:	1cc4      	adds	r4, r0, #3
 8006ce8:	f024 0403 	bic.w	r4, r4, #3
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d005      	beq.n	8006cfc <_malloc_r+0xa8>
 8006cf0:	1a21      	subs	r1, r4, r0
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 f808 	bl	8006d08 <_sbrk_r>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d0cf      	beq.n	8006c9c <_malloc_r+0x48>
 8006cfc:	6025      	str	r5, [r4, #0]
 8006cfe:	e7db      	b.n	8006cb8 <_malloc_r+0x64>
 8006d00:	200143cc 	.word	0x200143cc
 8006d04:	200143d0 	.word	0x200143d0

08006d08 <_sbrk_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4c06      	ldr	r4, [pc, #24]	; (8006d24 <_sbrk_r+0x1c>)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4605      	mov	r5, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	f000 f8a4 	bl	8006e60 <_sbrk>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_sbrk_r+0x1a>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_sbrk_r+0x1a>
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20014504 	.word	0x20014504

08006d28 <__sread>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d30:	f000 f884 	bl	8006e3c <_read_r>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	bfab      	itete	ge
 8006d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d3c:	181b      	addge	r3, r3, r0
 8006d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d42:	bfac      	ite	ge
 8006d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d46:	81a3      	strhlt	r3, [r4, #12]
 8006d48:	bd10      	pop	{r4, pc}

08006d4a <__swrite>:
 8006d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4e:	461f      	mov	r7, r3
 8006d50:	898b      	ldrh	r3, [r1, #12]
 8006d52:	05db      	lsls	r3, r3, #23
 8006d54:	4605      	mov	r5, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	4616      	mov	r6, r2
 8006d5a:	d505      	bpl.n	8006d68 <__swrite+0x1e>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d64:	f000 f856 	bl	8006e14 <_lseek_r>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	4632      	mov	r2, r6
 8006d76:	463b      	mov	r3, r7
 8006d78:	4628      	mov	r0, r5
 8006d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7e:	f7ff bbc1 	b.w	8006504 <_write_r>

08006d82 <__sseek>:
 8006d82:	b510      	push	{r4, lr}
 8006d84:	460c      	mov	r4, r1
 8006d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8a:	f000 f843 	bl	8006e14 <_lseek_r>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	bf15      	itete	ne
 8006d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d9e:	81a3      	strheq	r3, [r4, #12]
 8006da0:	bf18      	it	ne
 8006da2:	81a3      	strhne	r3, [r4, #12]
 8006da4:	bd10      	pop	{r4, pc}

08006da6 <__sclose>:
 8006da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006daa:	f000 b801 	b.w	8006db0 <_close_r>
	...

08006db0 <_close_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4c06      	ldr	r4, [pc, #24]	; (8006dcc <_close_r+0x1c>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4605      	mov	r5, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	f7f9 fe23 	bl	8000a06 <_close>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_close_r+0x1a>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_close_r+0x1a>
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20014504 	.word	0x20014504

08006dd0 <_fstat_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4c07      	ldr	r4, [pc, #28]	; (8006df0 <_fstat_r+0x20>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	4611      	mov	r1, r2
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	f7f9 fe1e 	bl	8000a1e <_fstat>
 8006de2:	1c43      	adds	r3, r0, #1
 8006de4:	d102      	bne.n	8006dec <_fstat_r+0x1c>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	b103      	cbz	r3, 8006dec <_fstat_r+0x1c>
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	bd38      	pop	{r3, r4, r5, pc}
 8006dee:	bf00      	nop
 8006df0:	20014504 	.word	0x20014504

08006df4 <_isatty_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4c06      	ldr	r4, [pc, #24]	; (8006e10 <_isatty_r+0x1c>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	f7f9 fe1d 	bl	8000a3e <_isatty>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_isatty_r+0x1a>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_isatty_r+0x1a>
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20014504 	.word	0x20014504

08006e14 <_lseek_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4c07      	ldr	r4, [pc, #28]	; (8006e34 <_lseek_r+0x20>)
 8006e18:	4605      	mov	r5, r0
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	6022      	str	r2, [r4, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f7f9 fe16 	bl	8000a54 <_lseek>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_lseek_r+0x1e>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_lseek_r+0x1e>
 8006e30:	602b      	str	r3, [r5, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20014504 	.word	0x20014504

08006e38 <__malloc_lock>:
 8006e38:	4770      	bx	lr

08006e3a <__malloc_unlock>:
 8006e3a:	4770      	bx	lr

08006e3c <_read_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4c07      	ldr	r4, [pc, #28]	; (8006e5c <_read_r+0x20>)
 8006e40:	4605      	mov	r5, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	4611      	mov	r1, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	6022      	str	r2, [r4, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7f9 fdbe 	bl	80009cc <_read>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_read_r+0x1e>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_read_r+0x1e>
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20014504 	.word	0x20014504

08006e60 <_sbrk>:
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <_sbrk+0x14>)
 8006e62:	6819      	ldr	r1, [r3, #0]
 8006e64:	4602      	mov	r2, r0
 8006e66:	b909      	cbnz	r1, 8006e6c <_sbrk+0xc>
 8006e68:	4903      	ldr	r1, [pc, #12]	; (8006e78 <_sbrk+0x18>)
 8006e6a:	6019      	str	r1, [r3, #0]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	4402      	add	r2, r0
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	4770      	bx	lr
 8006e74:	200143d4 	.word	0x200143d4
 8006e78:	20014508 	.word	0x20014508

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
